  /// \file ChargedFragmentsMergingAlgorithm2.h
/*
 *
 * ChargedFragmentsMergingAlgorithm2.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CHARGEDFRAGMENTSMERGINGALGORITHM2_H
#define CHARGEDFRAGMENTSMERGINGALGORITHM2_H 

#include "Pandora/Algorithm.h"
#include "Pandora/PandoraInputTypes.h"
#include "APRILApi/APRILInputTypes.h"

#include "APRILHelpers/CaloHitRangeSearchHelper.h"
#include "APRILHelpers/CaloHitNeighborSearchHelper.h"

namespace pandora { class ClusterFitResult; }

namespace april_content
{

/** 
 * @brief ChargedFragmentsMergingAlgorithm2 class
 */ 
class ChargedFragmentsMergingAlgorithm2 : public pandora::Algorithm
{
public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:
	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);
  
    april_content::APRILCluster* GetMainCluster(const pandora::CaloHitVector& caloHitVector);
  
    void GetNearbyClusters(pandora::Cluster* cluster, const std::vector<april_content::APRILCluster*>& clusterVector, 
			std::vector<april_content::APRILCluster*>& clustersInRange);

    bool CheckNearbyClusterWithCharge(const april_content::APRILCluster* pCluster, std::vector<april_content::APRILCluster*>& nearbyClusters, int charge);

    void SearchProperClusters(APRILCluster* startingCluster, 
		    std::vector<april_content::APRILCluster*>& allClusters,
			std::vector<april_content::APRILCluster*>& properClusters);

    pandora::StatusCode CleanClusterForMerging(std::vector<APRILCluster*>& clusterVector);

	/**
	 *  @brief  Get the eligible clusters for parent-daughter association
	 *
	 *  @param  clusterVector the cluster vector to receive
	 */
	pandora::StatusCode GetEligibleClusters(std::vector<APRILCluster*>& clusterVector) const;

	/**
	 *  @brief  Algorithm workhorse, find associations between daughter and parent cluster
	 *
	 *  @param  clusterVector the input cluster vector
	 *  @param  clusterToClusterMap the map of daughter to parent cluster to receive
	 */
	pandora::StatusCode FindClustersToMerge(const pandora::ClusterVector &clusterVector, ClusterToClusterMap &clusterToClusterMap) const;

	/**
	 *  @brief  Whether the cluster is eligible for association
	 *
	 *  @param  pCluster address of a candidate cluster for association
	 *
	 *  @return  boolean
	 */
	bool CanMergeCluster(const pandora::Cluster *const pCluster) const;

	/**
	 *  @brief  Find the best parent cluster to merge a daughter one
	 *
	 *  @param  pDaughterCluster address of the daughter cluster
	 *  @param  clusterVector a cluster vector
	 *  @param  pBestParentCluster address of the best parent cluster to receive
	 */
	pandora::StatusCode FindBestParentCluster(const pandora::Cluster *const pDaughterCluster, const pandora::ClusterVector &clusterVector,
			const pandora::Cluster *&pBestParentCluster) const;

private:
	float                            m_maxStartingClusterDistance;
	float                            m_maxClosestClusterDistance;

	bool                             m_debugOutput;
	bool                             m_debugOutput2;
	bool                             m_onlyUseConnectedHits;
	bool                             m_useMCPForPID;
	bool                             m_makeRecord;

	arma::mat m_clusterCentroidsMatrix;
	std::vector<APRILCluster*> m_clustersToMerge;
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *ChargedFragmentsMergingAlgorithm2::Factory::CreateAlgorithm() const
{
    return new ChargedFragmentsMergingAlgorithm2();
}

} 

#endif
