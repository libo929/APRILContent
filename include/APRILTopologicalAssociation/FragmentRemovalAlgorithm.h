  /// \file FragmentRemovalAlgorithm.h
/*
 *
 * FragmentRemovalAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. juin 30 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef FRAGMENTREMOVALALGORITHM_H
#define FRAGMENTREMOVALALGORITHM_H

#include "Pandora/Algorithm.h"
#include "Pandora/PandoraInputTypes.h"
#include "APRILApi/APRILInputTypes.h"

namespace april_content
{

class CaloHitMergingTool;

/** 
 * @brief FragmentRemovalAlgorithm class
 */ 
class FragmentRemovalAlgorithm : public pandora::Algorithm
{
public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:
	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Find cluster fragments in the event
	 *
	 *  @param  clusterVector the vector of cluster fragment to receive
	 */
	pandora::StatusCode FindClusterFragments(pandora::ClusterVector &clusterVector) const;

	/**
	 *  @brief  Remove cluster fragments and grab their calo hits
	 *
	 *  @param  clusterVector the vector of cluster fragment to remove
	 *  @param  removalCaloHitList the cluster fragment calo hits to receive
	 */
	pandora::StatusCode RemoveClusterFragments(const pandora::ClusterVector &clusterVector, pandora::CaloHitList &removalCaloHitList) const;

	/**
	 *
	 */
	pandora::StatusCode GetMergingClusters(pandora::ClusterVector &clusterVector) const;

private:
	unsigned int                               m_maxNHitsForAutomaticRemoval;
	float                                      m_maxEnergyForAutomaticRemoval;
	float                                      m_maxHadronicEnergyForAutomaticRemoval;
	unsigned int                               m_maxNHitsNonFragments;
	float                                      m_maxEnergyNonFragments;
	float                                      m_maxFragmentDensity;
	float                                      m_maxProximityDistanceFine;
	float                                      m_maxProximityDistanceCoarse;
	unsigned int                               m_maxNHitsProximity;
	pandora::StringVector                      m_additionalClusterMergingListNames;
	CaloHitMergingTool                        *m_pCaloHitMergingTool;          ///< The calo hit merging tool
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *FragmentRemovalAlgorithm::Factory::CreateAlgorithm() const
{
    return new FragmentRemovalAlgorithm();
}

} 

#endif  //  FRAGMENTREMOVALALGORITHM_H
