  /// \file UnassociatedTrackRecoveryAlg.h
/*
 *
 * UnassociatedTrackRecoveryAlg.h header template automatically generated by a class generator
 * Creation date : jeu. juil. 7 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef UNASSOCIATEDTRACKRECOVERYALG_H
#define UNASSOCIATEDTRACKRECOVERYALG_H

#include "Pandora/Algorithm.h"
#include "Pandora/PandoraInternal.h"
#include "Pandora/PandoraInputTypes.h"

namespace april_content
{

/** 
 * @brief UnassociatedTrackRecoveryAlg class
 */ 
class UnassociatedTrackRecoveryAlg : public pandora::Algorithm
{
public:
	/**
	 *  @brief  Factory class for instantiating algorithm
	 */
	class Factory : public pandora::AlgorithmFactory
	{
	public:
		pandora::Algorithm *CreateAlgorithm() const;
	};

private:
	pandora::StatusCode Run();
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Get the list of un-associated and eligible clusters
	 *
	 *  @param  clusterVector the cluster list to receive
	 */
	pandora::StatusCode GetUnassociatedClusters(pandora::ClusterVector &clusterVector) const;

	/**
	 *  @brief  Get the list of un-associated and eligible tracks
	 *
	 *  @param  trackVector the track list to receive
	 */
	pandora::StatusCode GetUnassociatedTracks(pandora::TrackVector &trackVector) const;

	/**
	 *  @brief  Perform possible associations between tracks and clusters
	 *
	 *  @param  clusterVector the input cluster vector
	 *  @param  trackVector the input track vector
	 */
	pandora::StatusCode PerformPossibleTrackClusterAssociations(const pandora::ClusterVector &clusterVector, const pandora::TrackVector &trackVector) const;

private:
	float                              m_maxOmegaTrack;                ///< The max omega for an eligible track
	float                              m_minEnergyAtDca;               ///< The min energy at dca for an eligible track
	float                              m_maxEndCapProjectionAngle;     ///< The max angle between the track and the endcap (if projected to endcap)
	unsigned int                       m_maxClusterInnerPseudoLayer;   ///< The max inner pseudo layer for an eligible cluster
	float                              m_maxTrackClusterDistance;      ///< The max track-cluster distance for distance evaluation
	float                              m_trackClusterDistanceCut;      ///< The track-cluster distance cut
	float                              m_trackClusterDistanceCut2;     ///< The track-cluster distance cut if energy improved
	float                              m_maxAssociationChi;            ///< The max (absolute) chi for a possible track-cluster association
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *UnassociatedTrackRecoveryAlg::Factory::CreateAlgorithm() const
{
    return new UnassociatedTrackRecoveryAlg();
}

} 

#endif  //  UNASSOCIATEDTRACKRECOVERYALG_H
