  /// \file VisualMonitoringAlgorithm.h
/*
 *
 * VisualMonitoringAlgorithm.h header template automatically generated by a class generator
 * Creation date : mar. avr. 14 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef VISUALMONITORINGALGORITHM_H
#define VISUALMONITORINGALGORITHM_H

#include "Pandora/Algorithm.h"

#ifdef MONITORING
#include "PandoraMonitoringApi.h"
#include "PandoraMonitoring.h"
#endif

namespace april_content
{

/** 
 * @brief VisualMonitoringAlgorithm class
 */ 
class VisualMonitoringAlgorithm : public pandora::Algorithm
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm
     */
    class Factory : public pandora::AlgorithmFactory
    {
    public:
        pandora::Algorithm *CreateAlgorithm() const;
    };

    /**
     *  @brief  Default constructor
     */
    VisualMonitoringAlgorithm();

private:
    pandora::StatusCode Run();
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

    /**
     *  @brief  Visualize mc particle list
     *
     *  @param  listName the list name
     */
    void VisualizeMCParticleList(const std::string &listName) const;

    /**
     *  @brief  Visualize a specified calo hit list
     *
     *  @param  listName the list name
     */
    void VisualizeCaloHitList(const std::string &listName) const;

    /**
     *  @brief  Visualize a specified track list
     *
     *  @param  listName the list name
     */
    void VisualizeTrackList(const std::string &listName) const;

    /**
     *  @brief  Visualize a specified calo hit list
     *
     *  @param  listName the list name
     */
    void VisualizeClusterList(const std::string &listName) const;

    /**
     *  @brief  Visualize a specified pfo list
     *
     *  @param  listName the list name
     */
    void VisualizeParticleFlowList(const std::string &listName) const;

    /**
     *  @brief  Visualize a specified vertex list
     *
     *  @param  listName the list name
     */
    void VisualizeVertexList(const std::string &listName) const;
  
    std::string GetHitTypeString(const pandora::HitType hitType) const;

	TEveElement* VisualizeClusterListWithConnectors(const pandora::ClusterList *const pClusterList, 
		  const std::string &name, TEveElement *parent, const Color color, bool showAssociatedTracks) const;
  
	void VisualizeClusterDirection(const pandora::Cluster* const pCluster, std::string name, TEveElement* parent, ::Color color) const;

#ifdef MONITORING
    /**
     *
     */
    void VisualizeConnectors(const pandora::CaloHitList *const pCaloHitList, std::string name, TEveElement* parent, ::Color color) const;

    /**
     *
     */
    EColor GetROOTColor(::Color color) const;
#endif

    typedef std::map<int, float> PdgCodeToEnergyMap;

    bool                    m_showCurrentConnectors;    ///< Whether to show connectors of the current list
    std::string              m_connectorLevel;            ///< Connector level at which they are drawn (calo hit, clusters, pfos)

    bool                    m_showCurrentMCParticles;   ///< Whether to show current mc particles
    pandora::StringVector   m_mcParticleListNames;      ///< Names of mc particles lists to show

    bool                    m_showCurrentCaloHits;      ///< Whether to show current calohitlist
    pandora::StringVector   m_caloHitListNames;         ///< Names of calo hit lists to show

    bool                    m_showCurrentTracks;        ///< Whether to show current tracks
    pandora::StringVector   m_trackListNames;           ///< Names of track lists to show

    bool                    m_showCurrentClusters;      ///< Whether to show current clusters
    pandora::StringVector   m_clusterListNames;         ///< Names of cluster lists to show

    bool                    m_showCurrentPfos;          ///< Whether to show current particle flow object list
    pandora::StringVector   m_pfoListNames;             ///< Names of pfo lists to show

    bool                    m_showCurrentVertices;      ///< Whether to show current vertex list
    pandora::StringVector   m_vertexListNames;          ///< Names of vertex lists to show

    bool                    m_displayEvent;             ///< Whether to display the event
    bool                    m_showDetector;             ///< Whether to display the detector geometry
    std::string             m_detectorView;             ///< The detector view, default, xy or xz

    bool                    m_showOnlyAvailable;        ///< Whether to show only available  (i.e. non-clustered) calohits and tracks
    bool                    m_showAssociatedTracks;     ///< Whether to display tracks associated to clusters when viewing cluster lists
    std::string             m_hitColors;                ///< Define the hit coloring scheme (default: pfo, choices: pfo, particleid)
    float                   m_thresholdEnergy;          ///< Cell energy threshold for display (em scale)
    float                   m_transparencyThresholdE;   ///< Cell energy for which transparency is saturated (0%, fully opaque)
    float                   m_energyScaleThresholdE;    ///< Cell energy for which color is at top end of continous color palette

    bool                    m_showPfoVertices;          ///< Whether to display pfo vertices
    bool                    m_showPfoHierarchy;         ///< Whether to display daughter pfos only under parent pfo elements
    bool                    m_darkBackground;           ///< Whether to use dark background 

    pandora::StringVector   m_suppressMCParticles;      ///< List of PDG numbers and energies for MC particles to be suppressed (e.g. " 22:0.1 2112:1.0 ")
    PdgCodeToEnergyMap      m_particleSuppressionMap;   ///< Map from pdg-codes to energy for suppression of particles types below specific energies
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::Algorithm *VisualMonitoringAlgorithm::Factory::CreateAlgorithm() const
{
    return new VisualMonitoringAlgorithm();
}

} 

#endif  //  VISUALMONITORINGALGORITHM_H
