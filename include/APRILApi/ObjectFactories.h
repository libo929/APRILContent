  /// \file ObjectFactories.h
/*
 *
 * ObjectFactories.h header template automatically generated by a class generator
 * Creation date : mar. avr. 28 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef OBJECTFACTORIES_H
#define OBJECTFACTORIES_H

#include "Api/PandoraApi.h"
#include "Api/PandoraContentApi.h"

#include "APRILApi/APRILInputTypes.h"
#include "Pandora/ObjectFactory.h"

namespace pandora { class FileReader; class FileWriter; }

namespace april_content
{

/**
 *  @brief  CaloHitFactory class
 */
class CaloHitFactory : public pandora::ObjectFactory<PandoraApi::CaloHit::Parameters, pandora::CaloHit>
{
private:
    /**
	 *  @brief  Create new parameters instance on the heap (memory-management to be controlled by user)
	 *
	 *  @return the address of the new parameters instance
	 */
	PandoraApi::CaloHit::Parameters *NewParameters() const;

    /**
	 *  @brief  Read any additional (derived class only) object parameters from file using the specified file reader
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  fileReader the file reader, used to extract any additional parameters from file
	 */
	pandora::StatusCode Read(PandoraApi::CaloHit::Parameters &parameters, pandora::FileReader &fileReader) const;

	/**
	 *  @brief  Persist any additional (derived class only) object parameters using the specified file writer
	 *
	 *  @param  pCaloHit the address of the object to persist
	 *  @param  fileWriter the file writer
	 */
	pandora::StatusCode Write(const pandora::CaloHit *const pCaloHit, pandora::FileWriter &fileWriter) const;

    /**
	 *  @brief  Create an object with the given parameters
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  pObject to receive the address of the object created
	 */
	pandora::StatusCode Create(const PandoraApi::CaloHit::Parameters &parameters, const pandora::CaloHit *&pCaloHit) const;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  TrackFactory class
 */
class TrackFactory : public pandora::ObjectFactory<PandoraApi::Track::Parameters, pandora::Track>
{
private:
    /**
	 *  @brief  Create new parameters instance on the heap (memory-management to be controlled by user)
	 *
	 *  @return the address of the new parameters instance
	 */
	PandoraApi::Track::Parameters *NewParameters() const;

    /**
	 *  @brief  Read any additional (derived class only) object parameters from file using the specified file reader
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  fileReader the file reader, used to extract any additional parameters from file
	 */
	pandora::StatusCode Read(PandoraApi::Track::Parameters &parameters, pandora::FileReader &fileReader) const;

	/**
	 *  @brief  Persist any additional (derived class only) object parameters using the specified file writer
	 *
	 *  @param  pCaloHit the address of the object to persist
	 *  @param  fileWriter the file writer
	 */
	pandora::StatusCode Write(const pandora::Track *const pTrack, pandora::FileWriter &fileWriter) const;

    /**
	 *  @brief  Create an object with the given parameters
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  pObject to receive the address of the object created
	 */
	pandora::StatusCode Create(const PandoraApi::Track::Parameters &parameters, const pandora::Track *&pTrack) const;

};

/**
 *  @brief  ClusterFactory class
 */
class ClusterFactory : public pandora::ObjectFactory<PandoraContentApi::Cluster::Parameters, pandora::Cluster>
{
private:
    /**
	 *  @brief  Create new parameters instance on the heap (memory-management to be controlled by user)
	 *
	 *  @return the address of the new parameters instance
	 */
	PandoraContentApi::Cluster::Parameters *NewParameters() const;

    /**
	 *  @brief  Read any additional (derived class only) object parameters from file using the specified file reader
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  fileReader the file reader, used to extract any additional parameters from file
	 */
	pandora::StatusCode Read(PandoraContentApi::Cluster::Parameters &parameters, pandora::FileReader &fileReader) const;

	/**
	 *  @brief  Persist any additional (derived class only) object parameters using the specified file writer
	 *
	 *  @param  pCluster the address of the object to persist
	 *  @param  fileWriter the file writer
	 */
	pandora::StatusCode Write(const pandora::Cluster *const pCluster, pandora::FileWriter &fileWriter) const;

    /**
	 *  @brief  Create an object with the given parameters
	 *
	 *  @param  parameters the parameters to pass in constructor
	 *  @param  pObject to receive the address of the object created
	 */
	pandora::StatusCode Create(const PandoraContentApi::Cluster::Parameters &parameters, const pandora::Cluster *&pCluster) const;
};


} 

#endif  //  OBJECTFACTORIES_H
