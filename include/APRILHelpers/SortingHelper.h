/// \file SortingHelper.h
/*
 *
 * SortingHelper.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SORTINGHELPER_H
#define SORTINGHELPER_H

#include "APRILApi/APRILInputTypes.h"

#include "Pandora/StatusCodes.h"
#include "Pandora/PandoraInternal.h"

#include "APRILObjects/Connector.h"
#include "APRILObjects/CaloHit.h"

namespace pandora { class Cluster; class Track; class Pandora; }

namespace april_content
{

  /**
   *  @brief  SortingHelper class
   */
  class SortingHelper
  {
  public:
    /**
     *  @brief  Sort clusters by inner layer, and hadronic energy for same layer
     *
     *  @param  pLhs the left handed cluster to compare
     *  @param  pRhs the right handed cluster to compare
     */
    static bool SortClustersByNHits(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs);
    static bool SortClustersByInnerLayer(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs);
  
	static bool SortCaloHitsByLayer(const pandora::CaloHit *const pLhs, const pandora::CaloHit *const pRhs);
    /**
     *  @brief  Sort branches by size
     *
     *  @param  lhs the left handed branch to compare
     *  @param  rhs the right handed branch to compare
     */
    static bool SortBranchesBySize(const Branch &lhs, const Branch &rhs);

    /**
     *  @brief  Sort tracks by energy at dca
     *
     *  @param  pLhs the left handed track to compare
     *  @param  pRhs the right handed track to compare
     */
    static bool SortTracksByEnergy(const pandora::Track *const pLhs, const pandora::Track *const pRhs);
  
	static bool SortTracksByMomentum(const pandora::Track* const pLhs, const pandora::Track* const pRhs);
    static bool SortHitsByPosition(const pandora::CaloHit* const pLhs, const pandora::CaloHit *const pRhs);
    static bool SortConnectorsByFromPosition(const april_content::Connector* const pLhs, const april_content::Connector* const pRhs);

    /**
     *  @brief  SortClusterByOmegaTracks class
     */
    class SortClusterByOmegaTracks
    {
    public:
      /**
       *  @brief  Constructor
       */
      SortClusterByOmegaTracks(const pandora::Pandora *const pPandora);

      /**
       *  @brief  Functor to sort clusters by omega track parameter
       *
       *  @param  pLhs the left handed cluster to compare
       *  @param  pRhs the right handed cluster to compare
       */
      bool operator() (const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs) const;

    private:
      const pandora::Pandora *const m_pPandora;
    };

    /**
     *  @brief  SortByTrackClusterCompatibility class
     */
    class SortByTrackClusterCompatibility
    {
    public:
      /**
       *  @brief  Constructor
       */
      SortByTrackClusterCompatibility(const pandora::Pandora *const pPandora);

      /**
       *  @brief  Functor to sort clusters by track-cluster compatibility
       *
       *  @param  pLhs the left handed cluster to compare
       *  @param  pRhs the right handed cluster to compare
       */
      bool operator() (const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs) const;

    private:
      const pandora::Pandora *const m_pPandora;
    };
  };

}


#endif  //  SORTINGHELPER_H
