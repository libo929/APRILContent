/*
 *
 * ListMergingAlgorithm.h header template automatically generated by a class generator
 * Creation date : ven. oct. 9 2015
 *
 * This file is part of ListMergingAlgorithm libraries.
 * 
 * ListMergingAlgorithm is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ListMergingAlgorithm is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ListMergingAlgorithm.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LISTMERGINGALGORITHM_H
#define LISTMERGINGALGORITHM_H

#include "Pandora/Algorithm.h"
#include "Pandora/PandoraInputTypes.h"
#include "Pandora/PandoraInternal.h"
//#include "Pandora/AlgorithmHeaders.h"

namespace april_content
{

/** 
 * @brief ListMergingAlgorithm class
 */
template <typename T>
class ListMergingAlgorithm : public pandora::Algorithm
{
protected:
    virtual pandora::StatusCode Run() = 0;
    pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

    pandora::StringVector                m_inputListNames;
    std::string                          m_outputListName;
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

template <typename T>
class InputObjectListMergingAlgorithm : public ListMergingAlgorithm<T>
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm
     */
    class Factory : public pandora::AlgorithmFactory
    {
    public:
        pandora::Algorithm *CreateAlgorithm() const;
    };

    pandora::StatusCode Run();
};

//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

template <typename T>
class AlgorithmObjectListMergingAlgorithm : public ListMergingAlgorithm<T>
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm
     */
    class Factory : public pandora::AlgorithmFactory
    {
    public:
        pandora::Algorithm *CreateAlgorithm() const;
    };

    pandora::StatusCode Run();
};

} 

#endif  //  LISTMERGINGALGORITHM_H
