  /// \file CaloHitMergingTool.h
/*
 *
 * CaloHitMergingTool.h header template automatically generated by a class generator
 * Creation date : lun. juil. 4 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHITMERGINGTOOL_H
#define CALOHITMERGINGTOOL_H

#include "Pandora/AlgorithmTool.h"
#include "Pandora/PandoraInternal.h"
#include "APRILApi/APRILInputTypes.h"

namespace april_content
{

/** 
 * @brief CaloHitMergingTool class
 */
class CaloHitMergingTool : public pandora::AlgorithmTool
{
public:
    /**
     *  @brief  Factory class for instantiating algorithm tool
     */
    class Factory : public pandora::AlgorithmToolFactory
    {
    public:
        pandora::AlgorithmTool *CreateAlgorithmTool() const;
    };

	/**
	 *  @brief  Read settings from the xml handle
	 *
	 *  @param  xmlHandle the xml handle to settings
	 */
    virtual pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *  @brief  Merge the calo hit list in provided cluster list
	 *
	 *  @param  algorithm the algorithm calling this function
	 *  @param  caloHitList the calo hits to merge
	 *  @param  clusterVector the cluster list to enlarge with calo hits
	 */
	virtual pandora::StatusCode MergeCaloHits(const pandora::Algorithm &algorithm, const pandora::CaloHitList &caloHitList, const pandora::ClusterVector &clusterVector);

private:
	/**
	 *  @brief  Find a possible parent cluster for each hit
	 *
	 *  @param  algorithm the algorithm calling this function
	 *  @param  caloHitList the input calo hit list
	 *  @param  clusterVector the input cluster list
	 *  @param  caloHitToClusterMap the map of calo hit to cluster to merge
	 */
	pandora::StatusCode FindCaloHitClusterMerging(const pandora::Algorithm &algorithm, const pandora::CaloHitList &caloHitList, const pandora::ClusterVector &clusterVector, CaloHitToClusterMap &caloHitToClusterMap) const;

	/**
	 *  @brief  Merge the calo hits in their target cluster
	 *
	 *  @param  algorithm the algorithm calling this function
	 *  @param  caloHitToClusterMap the calo hit to cluster map to perform the merging
	 */
	pandora::StatusCode MergeCaloHits(const pandora::Algorithm &algorithm, const CaloHitToClusterMap &caloHitToClusterMap) const;

	/**
	 *  @brief  Get the maximum distance to merge the calo hit into that cluster
	 *
	 *  @param  algorithm the algorithm calling this function
	 *  @param  pCaloHit the calo hit to merge
	 *  @param  pCluster the potential cluster to merge the calo hit in
	 *
	 *  @return float the maximum distance to merge the calo hit into that cluster
	 */
	float GetMaxCaloHitDistance(const pandora::Algorithm &algorithm, const pandora::CaloHit *const pCaloHit, const pandora::Cluster *const pCluster) const;

private:
	typedef std::map<int, float>             PidToDistanceMap;               ///< The pid flag to max merging distance map typedef
	float                                    m_maxCaloHitDistanceFine;       ///< The max distance to merge a hit in a cluster (fine granularity)
 	float                                    m_maxCaloHitDistanceCoarse;     ///< The max distance to merge a hit in a cluster (coarse granularity)
 	PidToDistanceMap                         m_maxCaloHitDistanceFineMap;    ///< The map of cluster pid -> max distance to merge a hit in a cluster (fine granularity)
 	PidToDistanceMap                         m_maxCaloHitDistanceCoarseMap;  ///< The map of cluster pid -> max distance to merge a hit in a cluster (coarse granularity)
};

//------------------------------------------------------------------------------------------------------------------------------------------

inline pandora::AlgorithmTool *CaloHitMergingTool::Factory::CreateAlgorithmTool() const
{
	return new CaloHitMergingTool();
}

} 

#endif  //  CALOHITMERGINGTOOL_H
