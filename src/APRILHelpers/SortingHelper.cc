/// \file SortingHelper.cc
/*
 *
 * SortingHelper.cc source template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILHelpers/SortingHelper.h"
#include "APRILHelpers/ReclusterHelper.h"

#include "Pandora/AlgorithmHeaders.h"
#include "Objects/Cluster.h"
#include "Objects/Track.h"
#include "APRILObjects/Branch.h"

namespace april_content
{
  bool SortingHelper::SortClustersByNHits(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs)
  {
      // NHits
      const unsigned int nCaloHitsLhs(pLhs->GetNCaloHits()), nCaloHitsRhs(pRhs->GetNCaloHits());
  
      if (nCaloHitsLhs != nCaloHitsRhs)
          return (nCaloHitsLhs > nCaloHitsRhs);
  
      // Track seeds
      if ((0 == nCaloHitsLhs) && (0 == nCaloHitsRhs))
      {
          const float trackEnergyLhs(pLhs->IsTrackSeeded() ? pLhs->GetTrackSeed()->GetEnergyAtDca() : 0.f);
          const float trackEnergyRhs(pRhs->IsTrackSeeded() ? pRhs->GetTrackSeed()->GetEnergyAtDca() : 0.f);
  
          if (std::fabs(trackEnergyLhs - trackEnergyRhs) > std::numeric_limits<float>::epsilon())
              return (trackEnergyLhs > trackEnergyRhs);
      }
  
      // Energy
      const float energyLhs(pLhs->GetHadronicEnergy()), energyRhs(pRhs->GetHadronicEnergy());
  
      if (std::fabs(energyLhs - energyRhs) > std::numeric_limits<float>::epsilon())
          return (energyLhs > energyRhs);
  
      // Energy in isolated hits
      const float isolatedEnergyLhs(pLhs->GetIsolatedHadronicEnergy()), isolatedEnergyRhs(pRhs->GetIsolatedHadronicEnergy());
  
      if (std::fabs(isolatedEnergyLhs - isolatedEnergyRhs) > std::numeric_limits<float>::epsilon())
          return (isolatedEnergyLhs > isolatedEnergyRhs);
  
      // Final attempt to distinguish
      if ((nCaloHitsLhs > 0) && (nCaloHitsRhs > 0))
      {
          const pandora::CaloHit *const pFirstHitLhs((pLhs->GetOrderedCaloHitList().begin())->second->front());
          const pandora::CaloHit *const pFirstHitRhs((pRhs->GetOrderedCaloHitList().begin())->second->front());
  
          return (*pFirstHitLhs < *pFirstHitRhs);
      }
  
      throw pandora::StatusCodeException(pandora::STATUS_CODE_NOT_FOUND);
  }

  bool SortingHelper::SortClustersByInnerLayer(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs)
  {
    const unsigned int innerLayerLhs(pLhs->GetInnerPseudoLayer()), innerLayerRhs(pRhs->GetInnerPseudoLayer());

    if (innerLayerLhs != innerLayerRhs)
      return (innerLayerLhs < innerLayerRhs);

    const unsigned int nCaloHitsLhs(pLhs->GetNCaloHits()), nCaloHitsRhs(pRhs->GetNCaloHits());

    if (nCaloHitsLhs != nCaloHitsRhs)
      return (nCaloHitsLhs > nCaloHitsRhs);

    return (pLhs->GetHadronicEnergy() > pRhs->GetHadronicEnergy());
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  bool SortingHelper::SortCaloHitsByLayer(const pandora::CaloHit *const pLhs, const pandora::CaloHit *const pRhs)
  {
    const unsigned int layerLhs(pLhs->GetPseudoLayer()), layerRhs(pRhs->GetPseudoLayer());

    return (layerLhs < layerRhs);
  }

  bool SortingHelper::SortTracksByMomentum(const pandora::Track* const pLhs, const pandora::Track* const pRhs)
  {
	  const float momentumLhs( pLhs->GetMomentumAtDca().GetMagnitude() );
	  const float momentumRhs( pRhs->GetMomentumAtDca().GetMagnitude() );

	  return (momentumLhs < momentumRhs);
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  bool SortingHelper::SortBranchesBySize(const Branch &lhs, const Branch &rhs)
  {
    return lhs.size() < rhs.size();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  bool SortingHelper::SortTracksByEnergy(const pandora::Track *const pLhs, const pandora::Track *const pRhs)
  {
    return pLhs->GetEnergyAtDca() < pRhs->GetEnergyAtDca();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------
  bool SortingHelper::SortHitsByPosition(const pandora::CaloHit* const pLhs, const pandora::CaloHit *const pRhs)
  {
	  if(pLhs==nullptr || pRhs==nullptr) return pLhs < pRhs;

	  auto& posL = pLhs->GetPositionVector();
	  auto& posR = pRhs->GetPositionVector();

	  if(posL.GetX() != posR.GetX())
	  {
		  return posL.GetX() < posR.GetX();
	  }

	  if(posL.GetY() != posR.GetY())
	  {
		  return posL.GetY() < posR.GetY();
	  }

	  return posL.GetZ() < posR.GetZ();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------
  bool SortingHelper::SortConnectorsByFromPosition(const april_content::Connector* const pLhs, const april_content::Connector *const pRhs)
  {
	  if(pLhs==nullptr || pRhs==nullptr) return pLhs < pRhs;

	  auto& posL = pLhs->GetFrom()->GetPositionVector();
	  auto& posR = pRhs->GetFrom()->GetPositionVector();

	  if(posL.GetX() != posR.GetX())
	  {
		  return posL.GetX() < posR.GetX();
	  }

	  if(posL.GetY() != posR.GetY())
	  {
		  return posL.GetY() < posR.GetY();
	  }

	  return posL.GetZ() < posR.GetZ();
  }
  //------------------------------------------------------------------------------------------------------------------------------------------

  SortingHelper::SortClusterByOmegaTracks::SortClusterByOmegaTracks(const pandora::Pandora *const pPandora) :
        m_pPandora(pPandora)
  {
  }

  //------------------------------------------------------------------------------------------------------------------------------------------


  bool SortingHelper::SortClusterByOmegaTracks::operator()(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs) const
  {
    if(pLhs->GetAssociatedTrackList().size() != 1)
      return false;

    if(pRhs->GetAssociatedTrackList().size() != 1)
      return true;

    const pandora::Track *const pLhsTrack(*pLhs->GetAssociatedTrackList().begin());
    const pandora::Track *const pRhsTrack(*pRhs->GetAssociatedTrackList().begin());

    const pandora::CartesianVector &lhsMom(pLhsTrack->GetTrackStateAtCalorimeter().GetMomentum());
    const pandora::CartesianVector &lhsProj(pLhsTrack->GetTrackStateAtCalorimeter().GetPosition());
    const pandora::CartesianVector &rhsMom(pRhsTrack->GetTrackStateAtCalorimeter().GetMomentum());
    const pandora::CartesianVector &rhsProj(pRhsTrack->GetTrackStateAtCalorimeter().GetPosition());

    const float bField(m_pPandora->GetPlugins()->GetBFieldPlugin()->GetBField(pandora::CartesianVector(0.f, 0.f, 0.f)));

    pandora::Helix lhsHelix(lhsProj, lhsMom, pLhsTrack->GetCharge(), bField), rhsHelix(rhsProj, rhsMom, pRhsTrack->GetCharge(), bField);

    return lhsHelix.GetOmega() > lhsHelix.GetOmega();
  }

  //------------------------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------------------------

  SortingHelper::SortByTrackClusterCompatibility::SortByTrackClusterCompatibility(const pandora::Pandora *const pPandora) :
        m_pPandora(pPandora)
  {
  }

  //------------------------------------------------------------------------------------------------------------------------------------------


  bool SortingHelper::SortByTrackClusterCompatibility::operator()(const pandora::Cluster *const pLhs, const pandora::Cluster *const pRhs) const
  {
    if(pLhs->GetAssociatedTrackList().empty())
      return false;

    if(pRhs->GetAssociatedTrackList().empty())
      return true;

    const pandora::TrackList lhsTrackList(pLhs->GetAssociatedTrackList()), rhsTrackList(pRhs->GetAssociatedTrackList());
    const float lhsChi(ReclusterHelper::GetTrackClusterCompatibility(*m_pPandora, pLhs, lhsTrackList));
    const float rhsChi(ReclusterHelper::GetTrackClusterCompatibility(*m_pPandora, pRhs, rhsTrackList));

    return (lhsChi*lhsChi < rhsChi*rhsChi);
  }

}

