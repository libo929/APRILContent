  /// \file TrackPreparationAlgorithm.cc
/*
 *
 * TrackPreparationAlgorithm.cc source template automatically generated by a class generator
 * Creation date : sam. mars 21 2015
 *
 * This file is part of ArborContent libraries.
 *
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author John Marshall
 */

#include "Pandora/AlgorithmHeaders.h"

#include "ArborUtility/TrackPreparationAlgorithm.h"

namespace arbor_content
{

bool SortTracksByEnergy(const pandora::Track *const pLhs, const pandora::Track *const pRhs)
{
   	return (pLhs->GetEnergyAtDca() > pRhs->GetEnergyAtDca());
}

TrackPreparationAlgorithm::TrackPreparationAlgorithm() :
    m_shouldMakeAssociations(true),
    m_shouldMakePfoTrackList(true)
{
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TrackPreparationAlgorithm::Run()
{
    // Create candidate track list, containing all tracks that could be associated to clusters and so used in final pfo creation
	pandora::TrackList candidateTrackList;

    for (pandora::StringVector::const_iterator iter = m_candidateListNames.begin(), iterEnd = m_candidateListNames.end(); iter != iterEnd; ++iter)
    {
        const pandora::TrackList *pTrackList = NULL;

        if (pandora::STATUS_CODE_SUCCESS != PandoraContentApi::GetList<pandora::TrackList>(*this, *iter, pTrackList))
            continue;

		int nCandiTrack(0);

        for (pandora::TrackList::const_iterator trackIter = pTrackList->begin(), trackIterEnd = pTrackList->end(); trackIter != trackIterEnd; ++trackIter)
        {
            if ((*trackIter)->IsAvailable()) {
                candidateTrackList.insert(*trackIter);
				std::cout << "candi track: " << ++nCandiTrack << ", energy: " << (*trackIter)->GetEnergyAtDca() << std::endl;
			}
			else {
				std::cout << "not a candi track,  energy: " << (*trackIter)->GetEnergyAtDca() << std::endl;
			}
        }
    }

    // Set this list of candidate pfo tracks to be the current track list
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList(*this, candidateTrackList, m_mergedCandidateListName));
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::Track>(*this, m_mergedCandidateListName));

    if (m_shouldMakeAssociations)
    {
        // Remove existing and calculate new track-cluster associations
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveCurrentTrackClusterAssociations(*this));

        for (pandora::StringVector::const_iterator iter = m_associationAlgorithms.begin(), iterEnd = m_associationAlgorithms.end();
            iter != iterEnd; ++iter)
        {
            PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, *iter));
        }
    }

    if (m_shouldMakePfoTrackList)
    {
        // Filter the candidate track list to identify the parent tracks of charged pfos
    	pandora::TrackList pfoTrackList;
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->CreatePfoTrackList(candidateTrackList, pfoTrackList));

		//std::cout << "candi Track: " << candidateTrackList.size() << "   Arbor: TrackList: " << pfoTrackList.size() << std::endl;

        // Save the filtered list and set it to be the current list for future algorithms
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList(*this, pfoTrackList, m_pfoTrackListName));
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::Track>(*this, m_pfoTrackListName));
    }

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TrackPreparationAlgorithm::CreatePfoTrackList(const pandora::TrackList &inputTrackList, pandora::TrackList &pfoTrackList) const
{
	//std::cout << "---------> TrackPreparationAlgorithm::CreatePfoTrackList <---------" << std::endl;

	pandora::TrackList siblingTracks;

	int nTrackInsert(0);

	/////
	pandora::TrackVector trackVector;

    for(pandora::TrackList::const_iterator iter = inputTrackList.begin() , endIter = inputTrackList.end() ;
        endIter != iter ; ++iter)
    { 
		const pandora::Track *const pTrack = *iter;
		trackVector.push_back(pTrack);
	}

	std::sort(trackVector.begin(), trackVector.end(), SortTracksByEnergy);

	/////

    for (int i = 0; i < trackVector.size(); ++i)
    {
        const pandora::Track *const pTrack = trackVector[i];

		//std::cout << "candi track energy: " << pTrack->GetEnergyAtDca() << std::endl;

        if (!pTrack->GetParentTrackList().empty()) 
		{
			//std::cout << "parent track list is not empty, so ignore this track... " << std::endl;
		
			//std::cout << std::endl;
            continue;
		}

        // Sibling tracks as first evidence of pfo target
        const pandora::TrackList &siblingTrackList(pTrack->GetSiblingTrackList());

        if (!siblingTrackList.empty())
        {
            if (siblingTracks.end() != siblingTracks.find(pTrack))
			{
				//std::cout << "Sibling tracks is not empty, but it is strange that this track is not included..." << std::endl;
				//std::cout << std::endl;
                continue;
			}

            if (this->HasAssociatedClusters(pTrack))
            {
                pfoTrackList.insert(pTrack);
                siblingTracks.insert(siblingTrackList.begin(), siblingTrackList.end());
				++nTrackInsert;
			    //std::cout << "TrackPreparationAlgorithm insert(has sibling track) : " << nTrackInsert  << ", with energy: " << pTrack->GetEnergyAtDca() << std::endl << std::endl;
            }
        }
        // Single parent track as pfo target
        else if (this->HasAssociatedClusters(pTrack))
        {
            pfoTrackList.insert(pTrack);
			++nTrackInsert;
			//std::cout << "TrackPreparationAlgorithm insert(has cluster) : " << nTrackInsert 
     //<< ", with energy: " << pTrack->GetEnergyAtDca() << ", cluster: "  << pTrack->GetAssociatedCluster()<< std::endl << std::endl;


       //std::cout << "TrackPreparationAlgorithm insert(has cluster) : " << nTrackInsert 
     //<< ", with energy: " << pTrack->GetEnergyAtDca() << std::endl << std::endl;
        }
		else 
		{
			std::cout << "ignore this track ... energy: " << pTrack->GetEnergyAtDca() << std::endl;
            // FIXME we should be very careful here !!!!!!!!!!!!!
            // energy, reach ecal can form pfo ???????????
            
			//std::cout << std::endl;
		}

		//std::cout << std::endl;
    }

	//std::cout << "---------> TrackPreparationAlgorithm::CreatePfoTrackList ends <---------" << std::endl << std::endl;

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

bool TrackPreparationAlgorithm::HasAssociatedClusters(const pandora::Track *const pTrack, const bool readSiblingInfo) const
{
    // Consider any daughter tracks
    const pandora::TrackList &daughterTrackList(pTrack->GetDaughterTrackList());
    const pandora::TrackList &siblingTrackList(pTrack->GetSiblingTrackList());
#if 0
	std::cout << "-----> HasAssociatedClusters: " << ", CanFormPfo: " << pTrack->CanFormPfo() 
		      << ", HasAssociatedCluster: " << pTrack->HasAssociatedCluster() << ", CanFormClusterlessPfo: " 
			  << pTrack->CanFormClusterlessPfo() << ", siblingTrackList: " << siblingTrackList.size() 
			  << ", daughterTrackList: " << daughterTrackList.size() << std::endl;
#endif

	//if(pTrack->HasAssociatedCluster()) std::cout << "track->Clu: " << pTrack->GetAssociatedCluster() << " e: " << 
	//	pTrack->GetAssociatedCluster()->GetElectromagneticEnergy() + pTrack->GetAssociatedCluster()->GetHadronicEnergy() << std::endl;

    if ((pTrack->CanFormPfo() && pTrack->HasAssociatedCluster()) || (pTrack->CanFormClusterlessPfo()))
        return true;

    if (!pTrack->IsAvailable())
        throw pandora::StatusCodeException(pandora::STATUS_CODE_FAILURE);

    // Consider any sibling tracks
    if (readSiblingInfo)
    {

        for (pandora::TrackList::const_iterator iter = siblingTrackList.begin(), iterEnd = siblingTrackList.end(); iter != iterEnd; ++iter)
        {
            if (this->HasAssociatedClusters(*iter, false))
                return true;
        }
    }


    for (pandora::TrackList::const_iterator iter = daughterTrackList.begin(), iterEnd = daughterTrackList.end(); iter != iterEnd; ++iter)
    {
        if (this->HasAssociatedClusters(*iter))
            return true;
    }

    return false;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode TrackPreparationAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadVectorOfValues(xmlHandle,
        "CandidateListNames", m_candidateListNames));

    if (m_candidateListNames.empty())
        return pandora::STATUS_CODE_INVALID_PARAMETER;

    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MergedCandidateListName", m_mergedCandidateListName));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ShouldMakeAssociations", m_shouldMakeAssociations));

    if (m_shouldMakeAssociations)
    {
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithmList(*this, xmlHandle,
            "trackClusterAssociationAlgorithms", m_associationAlgorithms));
    }

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ShouldMakePfoTrackList", m_shouldMakePfoTrackList));

    if (m_shouldMakePfoTrackList)
    {
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
            "PfoTrackListName", m_pfoTrackListName));
    }

    return pandora::STATUS_CODE_SUCCESS;
}

} // namespace lc_content
