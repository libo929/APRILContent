/// \file CaloHitMergingTool.cc
/*
 *
 * CaloHitMergingTool.cc source template automatically generated by a class generator
 * Creation date : lun. juil. 4 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILTools/CaloHitMergingTool.h"

#include "Pandora/AlgorithmHeaders.h"
#include "Pandora/Algorithm.h"

#include "APRILApi/APRILContentApi.h"
#include "APRILHelpers/ClusterHelper.h"

namespace april_content
{

  // TODO use open mp
  // => parallel on cluster loop in FindCaloHitClusterMerging()

  pandora::StatusCode CaloHitMergingTool::MergeCaloHits(const pandora::Algorithm &algorithm, const pandora::CaloHitList &caloHitList, const pandora::ClusterVector &clusterVector)
  {
    CaloHitToClusterMap caloHitToClusterMap;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->FindCaloHitClusterMerging(algorithm, caloHitList, clusterVector, caloHitToClusterMap));
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->MergeCaloHits(algorithm, caloHitToClusterMap));

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitMergingTool::FindCaloHitClusterMerging(const pandora::Algorithm &algorithm,const pandora::CaloHitList &caloHitList, const pandora::ClusterVector &clusterVector, CaloHitToClusterMap &caloHitToClusterMap) const
  {
    for(pandora::CaloHitList::const_iterator hitIter = caloHitList.begin(), hitEndIter = caloHitList.end() ;
        hitEndIter != hitIter ; ++hitIter)
    {
      const pandora::CaloHit *const pCaloHit(*hitIter);

      float bestDistanceToHit(std::numeric_limits<float>::max());
      const pandora::Cluster *pBestCluster = NULL;

      for(pandora::ClusterVector::const_iterator clusterIter = clusterVector.begin(), clusterEndIter = clusterVector.end() ;
          clusterEndIter != clusterIter ; ++clusterIter)
      {
        const pandora::Cluster *const pCluster(*clusterIter);

        // Get calo hit closest distance approach
        float caloHitDistance(std::numeric_limits<float>::max());

        if(pandora::STATUS_CODE_SUCCESS != ClusterHelper::GetClosestDistanceApproach(pCluster, pCaloHit->GetPositionVector(), caloHitDistance))
          continue;

        const float maxCaloHitDistance(this->GetMaxCaloHitDistance(algorithm, pCaloHit, pCluster));

        if(caloHitDistance < maxCaloHitDistance && caloHitDistance < bestDistanceToHit)
        {
          bestDistanceToHit = caloHitDistance;
          pBestCluster = pCluster;
        }
      }

      if(NULL != pBestCluster)
        caloHitToClusterMap[pCaloHit] = pBestCluster;
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitMergingTool::MergeCaloHits(const pandora::Algorithm &algorithm, const CaloHitToClusterMap &caloHitToClusterMap) const
  {
    for(CaloHitToClusterMap::const_iterator iter = caloHitToClusterMap.begin(), endIter = caloHitToClusterMap.end() ;
        endIter != iter ; ++iter)
    {
      const pandora::CaloHit *const pCaloHit(iter->first);
      const pandora::Cluster *const pCluster(iter->second);

      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddToCluster(algorithm, pCluster, pCaloHit));
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  float CaloHitMergingTool::GetMaxCaloHitDistance(const pandora::Algorithm &algorithm, const pandora::CaloHit *const pCaloHit, const pandora::Cluster *const pCluster) const
  {
    const pandora::Granularity &granularity(PandoraContentApi::GetGeometry(algorithm)->GetHitTypeGranularity(pCaloHit->GetHitType()));
    const int pidFlag(pCluster->PassPhotonId(algorithm.GetPandora()) ? pandora::PHOTON : pCluster->GetParticleId());

    // default distance for all clusters
    float maxCaloHitDistance((granularity <= pandora::FINE) ? m_maxCaloHitDistanceFine : m_maxCaloHitDistanceCoarse);

    // then proceed by particle flag
    if(pidFlag != 0)
    {
      if(granularity <= pandora::FINE)
      {
        PidToDistanceMap::const_iterator findIter = m_maxCaloHitDistanceFineMap.find(pidFlag);

        if(m_maxCaloHitDistanceFineMap.end() != findIter)
          maxCaloHitDistance = findIter->second;
      }
      else
      {
        PidToDistanceMap::const_iterator findIter = m_maxCaloHitDistanceCoarseMap.find(pidFlag);

        if(m_maxCaloHitDistanceCoarseMap.end() != findIter)
          maxCaloHitDistance = findIter->second;
      }
    }

    return maxCaloHitDistance;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode CaloHitMergingTool::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
    m_maxCaloHitDistanceFine = 200.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxCaloHitDistanceFine", m_maxCaloHitDistanceFine));

    m_maxCaloHitDistanceCoarse = 500.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxCaloHitDistanceCoarse", m_maxCaloHitDistanceCoarse));

    pandora::StringVector stringVector;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadVectorOfValues(xmlHandle,
        "MaxPidCaloHitDistanceFine", stringVector));

    for(pandora::StringVector::const_iterator iter = stringVector.begin(), endIter = stringVector.end() ; endIter != iter ; ++iter)
    {
      pandora::StringVector pidDistanceSeparated;
      const std::string delimiter = ":";
      pandora::XmlHelper::TokenizeString(*iter, pidDistanceSeparated, delimiter);

      if (pidDistanceSeparated.size() != 2)
        return pandora::STATUS_CODE_INVALID_PARAMETER;

      int pid(0);
      float distance(0.f);

      if (!pandora::StringToType(pidDistanceSeparated.at(0), pid) || !pandora::StringToType(pidDistanceSeparated.at(1), distance))
        return pandora::STATUS_CODE_INVALID_PARAMETER;

      m_maxCaloHitDistanceFineMap.insert(PidToDistanceMap::value_type(pid, distance));
    }

    stringVector.clear();
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadVectorOfValues(xmlHandle,
        "MaxPidCaloHitDistanceCoarse", stringVector));

    for(pandora::StringVector::const_iterator iter = stringVector.begin(), endIter = stringVector.end() ; endIter != iter ; ++iter)
    {
      pandora::StringVector pidDistanceSeparated;
      const std::string delimiter = ":";
      pandora::XmlHelper::TokenizeString(*iter, pidDistanceSeparated, delimiter);

      if (pidDistanceSeparated.size() != 2)
        return pandora::STATUS_CODE_INVALID_PARAMETER;

      int pid(0);
      float distance(0.f);

      if (!pandora::StringToType(pidDistanceSeparated.at(0), pid) || !pandora::StringToType(pidDistanceSeparated.at(1), distance))
        return pandora::STATUS_CODE_INVALID_PARAMETER;

      m_maxCaloHitDistanceCoarseMap.insert(PidToDistanceMap::value_type(pid, distance));
    }


    return pandora::STATUS_CODE_SUCCESS;
  }

} 

