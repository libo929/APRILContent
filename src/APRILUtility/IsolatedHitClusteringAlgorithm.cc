  /// \file IsolatedHitClusteringAlgorithm.cc
/*
 *
 * IsolatedHitClusteringAlgorithm.cc source template automatically generated by a class generator
 * Creation date : ven. dï¿½c. 4 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILUtility/IsolatedHitClusteringAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"

namespace april_content
{

pandora::StatusCode IsolatedHitClusteringAlgorithm::Run()
{
	const pandora::CaloHitList *pCaloHitList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

	if(pCaloHitList->empty())
		return pandora::STATUS_CODE_SUCCESS;

	pandora::CaloHitList isolatedCaloHitList;

	for(pandora::CaloHitList::const_iterator hitIter = pCaloHitList->begin(), hitEndIter = pCaloHitList->end() ;
			hitEndIter != hitIter ; ++hitIter)
	{
		if((*hitIter)->IsIsolated())
			isolatedCaloHitList.push_back(*hitIter);
	}

	if(!isolatedCaloHitList.empty())
	{
		const pandora::Cluster *pCluster = NULL;
		object_creation::ClusterParameters clusterParameters;
		clusterParameters.m_caloHitList = isolatedCaloHitList;

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(*this, clusterParameters, pCluster));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode IsolatedHitClusteringAlgorithm::ReadSettings(const pandora::TiXmlHandle /*xmlHandle*/)
{
	return pandora::STATUS_CODE_SUCCESS;
}


} 

