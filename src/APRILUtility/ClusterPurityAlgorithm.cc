/// \file ClusterPurityAlgorithm.cc
/*
 *
 * ClusterPurityAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. juin 2 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILUtility/ClusterPurityAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"
#include "APRILApi/APRILContentApi.h"
#include "APRILObjects/CaloHit.h"
#include "APRILHelpers/GeometryHelper.h"
#include "APRILHelpers/ReclusterHelper.h"
#include "APRILHelpers/HistogramHelper.h"

#include "APRILUtility/EventPreparationAlgorithm.h"
#include "APRILHelpers/ClusterHelper.h"

using namespace pandora;

namespace april_content
{

  pandora::StatusCode ClusterPurityAlgorithm::Run()
  {
#if 0
	std::cout << "m_listType: " << m_listType << std::endl;

	for(auto& listName : m_listNames)
	{
		std::cout << " list name: " << listName << std::endl;
	}
#endif

	pandora::ClusterList clusterList;
	GetClusterList(clusterList);

	for(pandora::ClusterList::const_iterator cluIter = clusterList.begin(); cluIter != clusterList.end(); ++cluIter)
	{
		//std::cout << "cluster: " << *cluIter << std::endl;
		const pandora::Cluster* cluster = *cluIter;

    	try
    	{
			float hitPurity = -1.e6;
			float energyPurity = -1.e6;
			float ordClusterHit = -1e6;

			//PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, GetPurity(cluster, hitPurity, energyPurity, ordClusterHit));
			GetPurity(cluster, hitPurity, energyPurity, ordClusterHit);

			if(energyPurity < 0.1) 
			{
				std::cout << "====== dumping cluster with low purity" << std::endl;
			
			    //PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, GetPurity(cluster, hitPurity, energyPurity, ordClusterHit, true));
			    GetPurity(cluster, hitPurity, energyPurity, ordClusterHit, true);
			}

			float clusterSize = cluster->GetNCaloHits();
			float clusterEnergy = cluster->GetHadronicEnergy();
	
            const pandora::MCParticle *const pCluMCParticle(pandora::MCParticleHelper::GetMainMCParticle(cluster));
			float pid = pCluMCParticle->GetParticleId();
			float clusterCharge = pandora::PdgTable::GetParticleCharge(pCluMCParticle->GetParticleId());
			float averageTime = ClusterHelper::GetAverageTime(cluster);
	
			std::vector<float> vars;
	        vars.push_back( float(EventPreparationAlgorithm::GetEventNumber()) );
			vars.push_back( clusterSize );
			vars.push_back( pid );
			vars.push_back( clusterCharge );
			vars.push_back( ordClusterHit );
			vars.push_back( clusterEnergy );
			vars.push_back( hitPurity );
			vars.push_back( energyPurity );
			vars.push_back( averageTime );

			HistogramManager::CreateFill("ClusterPurity", 
					"eventNumber:clusterSize:pid:clusterCharge:orderedClusterHit:clusterEnergy:hitPurity:energyPurity:averageTime", vars);

			//std::cout << "cluster energy: " << clusterEnergy << ", purity: " << clusterPurity << ", size: " << clusterSize 
			//	      << std::endl;
    	}
    	catch (pandora::StatusCodeException &)
    	{
    	}
	}

    const pandora::CaloHitList *pCaloHitList = nullptr; 
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

	unsigned int nUnclusteredHits = 0;

	unsigned int nECAL  = 0;
	unsigned int nHCAL  = 0;
	unsigned int nMUON  = 0;
	unsigned int nOther = 0;

    for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(); iter != pCaloHitList->end(); ++iter)
	{
		const pandora::CaloHit* const pCaloHit = *iter;

        if (PandoraContentApi::IsAvailable(*this, pCaloHit))
		{
		   ++nUnclusteredHits;
	  
		   pandora::HitType hitType = pCaloHit->GetHitType();

		   switch(hitType)
		   {
			   case pandora::HitType::ECAL:
				   ++nECAL;
				   break;
			   case pandora::HitType::HCAL:
				   ++nHCAL;
				   break;
			   case pandora::HitType::MUON:
				   ++nMUON;
				   break;
			   default:
				   ++nOther;
		   }
		}
	}
	
	std::vector<float> hitVars;
	hitVars.push_back( float(EventPreparationAlgorithm::GetEventNumber()) );
	hitVars.push_back( float(nUnclusteredHits) );
	hitVars.push_back( float(nECAL) );
	hitVars.push_back( float(nHCAL) );
	hitVars.push_back( float(nMUON) );
	hitVars.push_back( float(nOther) );

	HistogramManager::CreateFill("LeftHits", 
			"eventNumber:nUnclusteredHits:nECAL:nHCAL:nMUON:nOther", hitVars);
	std::cout << "===unClusteredHits size: " << nUnclusteredHits << std::endl;

    return pandora::STATUS_CODE_SUCCESS;
  }

  pandora::StatusCode ClusterPurityAlgorithm::GetClusterList(pandora::ClusterList& clusterList)
  {
	  clusterList.clear();

	  if(m_listType == 0) 
	  {
		  // looking for clusters from cluster list
	      for(auto& listName : m_listNames)
	      {
            const pandora::ClusterList *pClusterList = NULL;

			if(pandora::STATUS_CODE_SUCCESS == PandoraContentApi::GetList(*this, listName, pClusterList))
			{
				std::cout << "list " << listName << " size: " << pClusterList->size() << std::endl;

				for(auto& cluster : *pClusterList) clusterList.push_back(cluster);
			}
			else
			{
				std::cout << "list " << listName << " not found" << std::endl;
			}
	      }
	  }
	  else
	  {
		  // clusters from pfo list
	      for(auto& listName : m_listNames)
		  {
			const pandora::PfoList *pPfoList = NULL; 
    
			if(pandora::STATUS_CODE_SUCCESS != PandoraContentApi::GetList(*this, listName, pPfoList)) continue;

			if(NULL == pPfoList) continue;

			// for each pfo 
            for(pandora::PfoList::const_iterator iter = pPfoList->begin(), endIter = pPfoList->end(); endIter != iter ; ++iter)
            {
	        	const pandora::ParticleFlowObject* pfo = *iter;
	        	//std::cout << "PFO : " << pfo << ", PID: " << pfoPID << ", charge: " << pfoCharge << std::endl;

	        	const pandora::ClusterList& pfoClusterList = pfo->GetClusterList();

				// each cluster in pfo
				for(auto& cluster : pfoClusterList) clusterList.push_back(cluster);
	        }
		  }
	  }

	  std::cout << "cluster size: " << clusterList.size() << std::endl;
    
	  return pandora::STATUS_CODE_SUCCESS;
  }

  pandora::StatusCode ClusterPurityAlgorithm::GetPurity(const pandora::Cluster* cluster, float& hitPurity, float& energyPurity, 
		   float& ordClusterHit, bool printMCP) const
  {
	  const pandora::MCParticle *const pMCClusterParticle(pandora::MCParticleHelper::GetMainMCParticle(cluster));

	  if(printMCP)
	  {
		  std::cout << "Cluster : " << cluster << ", main mcp: " << pMCClusterParticle << std::endl;
	  }

	  pandora::CaloHitList caloHitList;
	  cluster->GetOrderedCaloHitList().FillCaloHitList(caloHitList);

	  if(cluster->GetNIsolatedCaloHits() != 0) return pandora::STATUS_CODE_INVALID_PARAMETER;

	  float clusterHitEnergy = 0.;

	  // FIXME
	  // this is not equal to caloHitList.size() 
	  // since some hits may be lost due to the exception to get main mcp of calo hit below
	  ordClusterHit = 0.;

	  float pureClusterEnergy = 0.;
	  float pureClusterHit = 0.;

      for(pandora::CaloHitList::const_iterator caloHitIter = caloHitList.begin(); caloHitIter != caloHitList.end(); ++caloHitIter)
      {
         const pandora::CaloHit* caloHit = *caloHitIter;
		 const april_content::CaloHit *const pAPRILCaloHit = dynamic_cast<const april_content::CaloHit *const>(caloHit);
	  
		 if(pAPRILCaloHit->GetMother() != cluster ) 
		 {
		     std::cout << " hit mother is set to: " << pAPRILCaloHit->GetMother() << ", but it is inside the cluster: " << cluster << std::endl;
			 return pandora::STATUS_CODE_INVALID_PARAMETER;
		 }
	
		 const pandora::MCParticle* caloHitMCP = NULL;

		 float hitEnergy = caloHit->GetHadronicEnergy();
    
         try
         {
         	const pandora::MCParticle *const pMCHitParticle(pandora::MCParticleHelper::GetMainMCParticle(caloHit));

			if(printMCP)
			{
				std::cout << "calo hit: " << caloHit << ", mcp: " << pMCHitParticle << std::endl;
			}

			caloHitMCP = pMCHitParticle;
         }
         catch (pandora::StatusCodeException &)
         {
         }

		 if(caloHitMCP ==NULL) continue;

		 clusterHitEnergy += hitEnergy;
		 ++ordClusterHit;

		 if( caloHitMCP == pMCClusterParticle )
		 {
			 pureClusterEnergy += hitEnergy;
			 ++pureClusterHit;
		 }
		 else
		 {
			 //std::cout << "purity degrading..." << std::endl;
		 }
	  }

	  hitPurity = pureClusterHit/ordClusterHit;
	  energyPurity = pureClusterEnergy/clusterHitEnergy;
    
	  return pandora::STATUS_CODE_SUCCESS;
  }

  pandora::StatusCode ClusterPurityAlgorithm::Initialize()
  {
	  return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterPurityAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
	m_listType = 0; // 0: cluster list; 1: pfo list
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, 
			pandora::XmlHelper::ReadValue(xmlHandle, "ListType", m_listType));

    m_listNames.clear(); 
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, 
			pandora::XmlHelper::ReadVectorOfValues(xmlHandle, "ListNames", m_listNames));

    return pandora::STATUS_CODE_SUCCESS;
  }

}
