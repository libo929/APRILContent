/// \file ClusterCheckAlgorithm.cc
/*
 *
 * ClusterCheckAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. juin 2 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILUtility/ClusterCheckAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"
#include "APRILApi/APRILContentApi.h"
#include "APRILObjects/CaloHit.h"
#include "APRILHelpers/GeometryHelper.h"
#include "APRILHelpers/ReclusterHelper.h"
#include "APRILHelpers/HistogramHelper.h"

namespace april_content
{

  pandora::StatusCode ClusterCheckAlgorithm::Run()
  {
#if 0
	{
    const pandora::ClusterList *pClusterList = NULL;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	std::cout << "  ---> Cluster list size: " << pClusterList->size() << std::endl;

    for(pandora::ClusterList::const_iterator iter = pClusterList->begin(), endIter = pClusterList->end() ;
        endIter != iter ; ++iter)
    {
		const pandora::Cluster* cluster = *iter;
		const pandora::TrackList& trackList = cluster->GetAssociatedTrackList();

        //unsigned int nTrackAssociations(trackList.size());
        //if((nTrackAssociations < m_minTrackAssociations) || (nTrackAssociations > m_maxTrackAssociations)) return false;

        float trackEnergySum(0.);

        for (pandora::TrackList::const_iterator trackIter = trackList.begin(), trackIterEnd = trackList.end(); 
            trackIter != trackIterEnd; ++trackIter)
        {   
          trackEnergySum += (*trackIter)->GetEnergyAtDca();
        }   

        if(trackEnergySum < 1.) continue;

        const float chi(ReclusterHelper::GetTrackClusterCompatibility(this->GetPandora(), cluster, trackList));

		if(std::fabs(chi)>0.) {
			std::cout << "chi: " << chi << ", cluster: " << cluster << ", cluster energy: " << cluster->GetHadronicEnergy() 
				      << ", track E: " << trackEnergySum << std::endl; 
		}

		//if(trackList.size()>0)
		//std::cout << "cluster E: " << cluster->GetHadronicEnergy() << ", track E: " << trackEnergy << std::endl;
	}
	}
#endif


	/////////////////////////
    const pandora::PfoList *pPfoList = NULL; 
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pPfoList));

    const pandora::ClusterList *pClusterList = NULL; 
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	std::cout << "------- # Cluster : " << pClusterList->size() << std::endl;
	std::cout << "------- # PFO : " << pPfoList->size() << std::endl;

    for(pandora::PfoList::const_iterator iter = pPfoList->begin(), endIter = pPfoList->end(); endIter != iter ; ++iter)
    {
		const pandora::ParticleFlowObject* pfo = *iter;
		//int pfoPID = pfo->GetParticleId();
		//int pfoCharge = pfo->GetCharge();

		//std::cout << "PFO : " << pfo << ", PID: " << pfoPID << ", charge: " << pfoCharge << std::endl;

		const pandora::ClusterList& pfoClusterList = pfo->GetClusterList();

#if 0
		const pandora::TrackList& pfoTrackList = pfo->GetTrackList();

		//float clustersEnergy = 0.;
		float tracksEnergy = 0.;

		for(pandora::TrackList::const_iterator trackIter = pfoTrackList.begin(); trackIter != pfoTrackList.end(); ++trackIter)
		{
			const pandora::Track* track = *trackIter;
			float trackEnergy = track->GetEnergyAtDca();

			tracksEnergy += trackEnergy;

	        std::vector<float> vars;

		    float energy = track->GetEnergyAtDca();
		    float charge = track->GetCharge();
		    float reachesCalorimeter = track->ReachesCalorimeter();
		    float isProjectedToEndCap = track->IsProjectedToEndCap();
		    float canFormPfo = track->CanFormPfo();
		    float canFormClusterlessPfo = track->CanFormClusterlessPfo();
		    float hasAssociatedCluster = track->HasAssociatedCluster();
		    float siblingTrack = pfoTrackList.size() - 1;

	        vars.push_back( energy );
	        vars.push_back( charge );
	        vars.push_back( reachesCalorimeter );
	        vars.push_back( isProjectedToEndCap );
	        vars.push_back( canFormPfo );
	        vars.push_back( canFormClusterlessPfo );
	        vars.push_back( hasAssociatedCluster );
	        vars.push_back( siblingTrack );
	
		    HistogramManager::CreateFill("PFOTrack", 
				"energy:charge:reachesCalorimeter:isProjectedToEndCap:canFormPfo:canFormClusterlessPfo:hasAssociatedCluster:siblingTrack", vars);
		}
#endif

     	checkClusters(pfoClusterList);
	}


	if(pClusterList!=NULL)
	{
        std::cout << "Checking clusters" << std::endl;
		checkClusters(*pClusterList);
	}

#if 0
	{
	    ///// check hit
	    double totHitEnergy = 0.;
	    double totAvailableHitEnergy = 0.;

        const pandora::CaloHitList *pCaloHitList = NULL;
        PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

        const pandora::CaloHitList localCaloHitList(pCaloHitList->begin(), pCaloHitList->end());

        for (pandora::CaloHitList::const_iterator iter = localCaloHitList.begin(), iterEnd = localCaloHitList.end(); iter != iterEnd; ++iter)
        {
            try
            {
                const pandora::CaloHit *const pCaloHit = *iter;
	    		double hitEnergy = pCaloHit->GetHadronicEnergy();

                if (PandoraContentApi::IsAvailable(*this, pCaloHit))
	    		{
	    			totAvailableHitEnergy += hitEnergy;
	    			//std::cout << "a available hit energy: " << hitEnergy << ", total: " << totAvailableHitEnergy << std::endl;

#if 0	
    			    try
    			    {
    			       const pandora::MCParticle *const pMCParticle(pandora::MCParticleHelper::GetMainMCParticle(pCaloHit));
	    		    }
                    catch (pandora::StatusCodeException &)
                    {
						//std::cout << "no MCP" << std::endl;
                    }
#endif
				}

	    		totHitEnergy += pCaloHit->GetHadronicEnergy();
	    	}
            catch (pandora::StatusCodeException &)
            {
            }
	    }

	    std::cout << "total hit energy available: " << totAvailableHitEnergy << ", total hit energy: " << totHitEnergy << std::endl;
	}
#endif

#if 0
	{
        const MCParticleList *pMCParticleList = NULL;
        PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pMCParticleList));

        for (MCParticleList::const_iterator iterMC = pMCParticleList->begin(), iterMCEnd = pMCParticleList->end(); iterMC != iterMCEnd; ++iterMC)
        {
            try
            {
                const MCParticle *const pPfoTarget = *iterMC;
                PfoParameters pfoParameters;
			}
            catch (StatusCodeException &)
            {
            }
		}
	}
#endif
	
    return pandora::STATUS_CODE_SUCCESS;
  }


  void ClusterCheckAlgorithm::checkClusters(const pandora::ClusterList& pfoClusterList)
  {

	 //std::cout << "cluster size: " << pfoClusterList.size() << std::endl;

     for(pandora::ClusterList::const_iterator clusterIter = pfoClusterList.begin(); clusterIter != pfoClusterList.end(); ++clusterIter)
     {
    		const pandora::Cluster* cluster = *clusterIter;
		    float energy = cluster->GetHadronicEnergy();

			int clusterMCPID = -1e6;


    		try
    		{
    			const pandora::MCParticle *const pMCClusterParticle(pandora::MCParticleHelper::GetMainMCParticle(cluster));
    		    clusterMCPID = pMCClusterParticle->GetParticleId();
    		}
    		catch (pandora::StatusCodeException &)
    		{
    		}

	        std::vector<float> vars;
			vars.push_back( float(clusterMCPID) );
			vars.push_back( energy );
		    HistogramManager::CreateFill("PFOCluster", "clusterPID:energy", vars);
    
#if 0

#if 0
    		try
    		{
    			const pandora::MCParticle *const pMCClusterParticle(pandora::MCParticleHelper::GetMainMCParticle(cluster));
    		    std::cout << "Cluster : " << cluster << ", MCPID: " << pMCClusterParticle->GetParticleId() << std::endl;
    		}
    		catch (pandora::StatusCodeException &)
    		{
    		}
#endif    
    
    		const pandora::OrderedCaloHitList& orderedHits = cluster->GetOrderedCaloHitList();
    		const pandora::CaloHitList& isoHits = cluster->GetIsolatedCaloHitList();

			const pandora::MCParticle* firstMCP = NULL;
    
            pandora::CaloHitList hitList;
    		orderedHits.FillCaloHitList(hitList);
    
    		for(pandora::CaloHitList::const_iterator isoHitIter = isoHits.begin(); isoHitIter != isoHits.end(); ++isoHitIter)
    		{
    			const pandora::CaloHit* isoHit = *isoHitIter;
    
    			try
    			{
    			   const pandora::MCParticle *const pMCParticle(pandora::MCParticleHelper::GetMainMCParticle(isoHit));

#if 0
    			   int mcpCharge = pandora::PdgTable::GetParticleCharge(pMCParticle->GetParticleId());
    
    			       std::cout << "isohit MCP: " << pMCParticle << ", PID: " << pMCParticle->GetParticleId()  << 
    			   		", charge: " << mcpCharge << std::endl;
#endif

				   if(firstMCP==NULL)
				   {
				   	 firstMCP = pMCParticle;
				   }

				   if(firstMCP!=NULL && firstMCP != pMCParticle)
				   {
					   std::cout << "----------  firstMCP: " << firstMCP << ", thisMCP: " << pMCParticle << std::endl;
				   }
    			}
    			catch (pandora::StatusCodeException &)
    			{
    			}
    		}
    
    		for(pandora::CaloHitList::const_iterator hitIter = hitList.begin(); hitIter != hitList.end(); ++hitIter)
    		{
    			const pandora::CaloHit* hit = *hitIter;
    
    			try
    			{
    				const pandora::MCParticle *const pMCParticle(pandora::MCParticleHelper::GetMainMCParticle(hit));

    				int mcpCharge = pandora::PdgTable::GetParticleCharge(pMCParticle->GetParticleId());
    
#if 0
    			    std::cout << "hit MCP: " << pMCParticle << ", PID: " << pMCParticle->GetParticleId()  << 
    					", charge: " << mcpCharge << std::endl;
#endif

				   if(firstMCP==NULL)
				   {
				   	 firstMCP = pMCParticle;
				   }

				   if(firstMCP!=NULL && firstMCP != pMCParticle)
				   {
					   int firstMCPChg = pandora::PdgTable::GetParticleCharge(firstMCP->GetParticleId());
					   std::cout << "firstMCP: " << firstMCP << ", chg: " << firstMCPChg << ", thisMCP: " 
						         << pMCParticle << ", chg: " << mcpCharge << std::endl;
				   }
    			}
    			catch (pandora::StatusCodeException &)
    			{
    			}
    		}
		#endif
    	}
  }

  pandora::StatusCode ClusterCheckAlgorithm::Initialize()
  {
      //std::cout << "timing:  "   << m_timing  << std::endl;
      //std::cout << "time cut:  " << m_timeCut << std::endl;
      
	  //std::cout << "********* ClusterCheckAlgorithm init ********" << std::endl;
    
	  return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterCheckAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
	m_timing = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ApplyTiming", m_timing));

    m_timeCut = 100.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "TimeCut", m_timeCut));

    return pandora::STATUS_CODE_SUCCESS;
  }

} 
