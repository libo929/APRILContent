/// \file PhotonReconstructionAlgorithm.cc
/*
 *
 * PhotonReconstructionAlgorithm.cc source template automatically generated by a class generator
 * Creation date : lun. oct. 24 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborParticleId/PhotonReconstructionAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"
#include "ArborHelpers/ClusterHelper.h"

namespace arbor_content
{
  pandora::StatusCode PhotonReconstructionAlgorithm::Run()
  {
    // If specified, change the current calo hit list, i.e. the input to the clustering algorithm
    std::string originalCaloHitListName;
	  //std::cout << "originalCaloHitListName: " << originalCaloHitListName << std::endl;

    if (!m_inputCaloHitListName.empty())
    {
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentListName<pandora::CaloHit>(*this, originalCaloHitListName));
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::CaloHit>(*this, m_inputCaloHitListName));
    }

    {
      // First check if cluster list name already exists to assess pre-photon formation
      const pandora::ClusterList *pPhotonClusterList = NULL;
      const pandora::StatusCode statusCode(PandoraContentApi::GetList(*this, m_clusterListName, pPhotonClusterList));

      if(pandora::STATUS_CODE_SUCCESS == statusCode)
      {
        std::cout << "PhotonReconstructionAlgorithm: photon cluster list name '" << m_clusterListName << " already exists! Skipping photon cluster formation ..." << std::endl;
        return pandora::STATUS_CODE_SUCCESS;
      }
      else if(pandora::STATUS_CODE_NOT_INITIALIZED != statusCode)
      {
        return statusCode;
      }
    }

    // Run the initial cluster formation algorithm
    const pandora::ClusterList *pClusterList = NULL;
    std::string newClusterListName;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunClusteringAlgorithm(*this, m_clusteringAlgorithmName,
        pClusterList, newClusterListName));
      
    //std::cout << "  ---> The name of cluster list : " << newClusterListName << ", size: " << pClusterList->size() << std::endl;

    // Run the topological association algorithms to modify clusters
    if (!pClusterList->empty() && !m_associationAlgorithmName.empty())
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, m_associationAlgorithmName));

    // Select photons from created clusters
    pandora::ClusterList photonClusters;
    pandora::ClusterList nonPhotonClusters;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, 
			                 this->SelectPhotonsAndRemoveOthers(pClusterList, photonClusters, nonPhotonClusters));
      
    //std::cout << "photon cluster size: " << photonClusters.size() << std::endl;
    //std::cout << "the new cluster list name: " << newClusterListName << ", size: " << pClusterList->size() << std::endl;

    // Save the new cluster list
    if (!photonClusters.empty())
    {
      //std::cout << "  ---> The photon cluster size: " << photonClusters.size() << std::endl;
        
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList(*this, m_clusterListName, photonClusters));

      if (m_replaceCurrentClusterList)
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::Cluster>(*this, m_clusterListName));
    }

#if 0
    if (!nonPhotonClusters.empty())
    {
      std::cout << "  ---> The nonPhoton cluster size: " << nonPhotonClusters.size() << std::endl;
        
	  std::string nonPhotonListName("nonPhotonClusters");
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList(*this, nonPhotonListName, nonPhotonClusters));
	}
#endif

    // Unless specified, return current calo hit list to that when algorithm started
    if (m_restoreOriginalCaloHitList && !m_inputCaloHitListName.empty())
    {
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::CaloHit>(*this, originalCaloHitListName));
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode PhotonReconstructionAlgorithm::SelectPhotonsAndRemoveOthers(const pandora::ClusterList *const pInputClusterList, 
		                 pandora::ClusterList &photonClusters,
		                 pandora::ClusterList &nonPhotonClusters)
  {
    for(pandora::ClusterList::const_iterator iter = pInputClusterList->begin(), endIter = pInputClusterList->end() ;
        endIter != iter ; ++iter)
    {
      if(PandoraContentApi::GetPlugins(*this)->GetParticleId()->IsPhoton(*iter))
      {
        PandoraContentApi::ClusterMetadata metadata;
        metadata.m_particleId = pandora::PHOTON;

        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AlterMetadata(*this, *iter, metadata));

        photonClusters.insert(*iter);
      }
      else
      {
        nonPhotonClusters.insert(*iter);
      }
    }

	//std::cout << "-------- Photon cluster: " << photonClusters.size() << std::endl;

    // Maybe we can leave the non-photon clusters there, and use them for the later algorithms
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ClusterHelper::CleanAndDeleteClusters(*this, nonPhotonClusters));

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode PhotonReconstructionAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
    // Daughter algorithm parameters
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
        "ClusterFormation", m_clusteringAlgorithmName));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
        "ClusterAssociation", m_associationAlgorithmName));

    // Input parameters: name of input calo hit list and whether it should persist as the current list after algorithm has finished
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "InputCaloHitListName", m_inputCaloHitListName));

    m_restoreOriginalCaloHitList = !m_inputCaloHitListName.empty();
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "RestoreOriginalCaloHitList", m_restoreOriginalCaloHitList));

    // Output parameters: name of output cluster list and whether it should subsequently be used as the current list
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ClusterListName", m_clusterListName));

    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ReplaceCurrentClusterList", m_replaceCurrentClusterList));

    return pandora::STATUS_CODE_SUCCESS;
  }
} 

