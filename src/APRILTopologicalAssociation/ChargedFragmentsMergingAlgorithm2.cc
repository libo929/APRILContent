/// \file ChargedFragmentsMergingAlgorithm2.cc
/*
 *
 * ChargedFragmentsMergingAlgorithm2.cc source template automatically generated by a class generator
 * Creation date : jeu. avr. 9 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "Pandora/AlgorithmHeaders.h"
#include "PandoraMonitoringApi.h"
#include "PandoraMonitoring.h"

#include "APRILTopologicalAssociation/ChargedFragmentsMergingAlgorithm2.h"

#include "APRILHelpers/SortingHelper.h"
#include "APRILHelpers/GeometryHelper.h"
#include "APRILHelpers/ReclusterHelper.h"
#include "APRILHelpers/ClusterHelper.h"
#include "APRILHelpers/HistogramHelper.h"
#include "APRILHelpers/ClusterPropertiesHelper.h"

#include "APRILApi/APRILContentApi.h"

#include "APRILUtility/EventPreparationAlgorithm.h"

#include "APRILTools/TrackDrivenSeedingTool.h"
#include "APRILObjects/CaloHit.h"

#include "TMath.h"

#include <algorithm>

namespace april_content
{
  pandora::StatusCode ChargedFragmentsMergingAlgorithm2::Run()
  {
    // get candidate clusters for association
	std::vector<APRILCluster*> clusterVector;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->GetEligibleClusters(clusterVector));

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<pandora::CartesianVector> m_clusterCentroids;

	for(auto clu : clusterVector)
	{
		auto& centroid = clu->GetCentroid();
		m_clusterCentroids.push_back(centroid);
	}

	CaloHitRangeSearchHelper::FillMatixByPoints(m_clusterCentroids, m_clusterCentroidsMatrix);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	for(int i = 0; i < clusterVector.size(); ++i)
	{
		auto pCluster = clusterVector.at(i);
			
		if(pCluster->GetHadronicEnergy() > 2.0 ) continue;

		const pandora::TrackList& associatedTrackList = pCluster->GetAssociatedTrackList();
		if(!associatedTrackList.empty()) continue;
		
		pCluster->Reset();

		///////
		pandora::CartesianVector centroid(0., 0., 0);
		ClusterHelper::GetCentroid(pCluster, centroid);
		pCluster->SetCentroid(centroid);
		
		const pandora::Cluster* const pandoraClu = dynamic_cast<const pandora::Cluster* const>(pCluster);

		bool isPhoton = PandoraContentApi::GetPlugins(*this)->GetParticleId()->IsPhoton(pandoraClu);
		pCluster->SetPhoton(isPhoton);

		if(isPhoton) continue;

		int clusterPID = -1e8;
		int clusterCharge = -1000;

		try
		{
			clusterPID = pandora::MCParticleHelper::GetMainMCParticle(pandoraClu)->GetParticleId();
			clusterCharge = pandora::PdgTable::GetParticleCharge( clusterPID );
		
			if(m_useMCPForPID) isPhoton = (clusterPID == 22);
		}
		catch(pandora::StatusCodeException &)
		{
			std::cout << "MCP issue: " << pandoraClu << std::endl;
		}


		if(m_debugOutput)
		{
			std::cout << "-----------------------------------------------------------------------------------------" << std::endl;
			std::cout << " --- cluster : " << pCluster << ", energy: " << pCluster->GetHadronicEnergy() 
			      << ", COG: " << centroid.GetX() << ", " << centroid.GetY() << ", " << centroid.GetZ() << ", isPoton: " << isPhoton 
				  << ", associatedTrackList size: " << pCluster->GetAssociatedTrackList().size() << std::endl;
		}

		try
		{
		    pandora::ClusterFitResult clusterFitResult;

			// fit with only connected calo hits; if not successful, with all calo hits.
			pandora::StatusCode fitStatus;

			if(isPhoton)
			{
				// fit all connected calo hits
				fitStatus = ClusterHelper::FitFullCluster(pCluster, clusterFitResult);
			}
			else
			{
				// fit the main connected calo hits
				fitStatus = ClusterHelper::FitFullCluster(pCluster, clusterFitResult, true);
			}

			if(fitStatus)
			{
	            if(m_debugOutput2)
				{
					std::cout << " ---> fit all hits for cluster " << pCluster << ", E: " << pCluster->GetHadronicEnergy() << std::endl;
				}
				pandora::ClusterFitHelper::FitFullCluster(pCluster, clusterFitResult);
			}

		    const pandora::CartesianVector& cluDirection = clusterFitResult.GetDirection();
		    const pandora::CartesianVector& cluIntercept = clusterFitResult.GetIntercept();
			
			pCluster->SetAxis(cluDirection);
			pCluster->SetIntercept(cluIntercept);
		}
		catch(pandora::StatusCodeException &)
		{
	        if(m_debugOutput2)
			{
				std::cout << " ---> fitting cluster " << pCluster << ", E: " << pCluster->GetHadronicEnergy() << " failed." << std::endl;
			}
		}

		try
		{
		    pandora::ClusterFitResult clusterFitResult;

			if(ClusterHelper::FitStart(pCluster, 3, clusterFitResult) != pandora::STATUS_CODE_SUCCESS)
			{
				pandora::ClusterFitHelper::FitStart(pCluster, 3, clusterFitResult);
			}
			
			const pandora::CartesianVector& startingPoint = clusterFitResult.GetIntercept();

			pCluster->SetStartingPoint(startingPoint);
		}
		catch(pandora::StatusCodeException &)
		{
		}

		try
		{
		    pandora::ClusterFitResult clusterFitResult;
			pandora::ClusterFitHelper::FitEnd(pCluster, 3, clusterFitResult);
		    const pandora::CartesianVector& endpoint = clusterFitResult.GetIntercept();

			pCluster->SetEndpoint(endpoint);
		}
		catch(pandora::StatusCodeException &)
		{
		}

		///////
		auto clusterRegion = ClusterHelper::GetRegion(pCluster);

		float clusterIPAngle = ClusterHelper::GetClusterAxisStartingPointAngle(pCluster);
		float clusterTime = ClusterHelper::GetAverageTime(pCluster);
		float clusterTimeECal = ClusterHelper::GetAverageTime(pCluster, true);
		float hadEnergyInEcal = ClusterHelper::GetHadronicEnergyInECAL(pCluster);
		float density = ClusterHelper::GetMeanDensity(pCluster);

		float energyRatio = hadEnergyInEcal / pCluster->GetHadronicEnergy();

		///////
		const float maxLength = 50.;
		pandora::CaloHitList mainClusterHits;
		ClusterHelper::GetMainClusterHits(pCluster, mainClusterHits, maxLength);

		pandora::OrderedCaloHitList mainOrderedClusterHits;
		mainOrderedClusterHits.Add(mainClusterHits);

		pCluster->SetMainClusterHits(mainClusterHits);
		pCluster->SetMainOrderedClusterHits(mainOrderedClusterHits);

		float energyRatioOfMainHits = ClusterHelper::GetEnergyRatio(mainOrderedClusterHits);
		///////

		unsigned int innerLayer = pCluster->GetInnerPseudoLayer();
		unsigned int outerLayer = pCluster->GetOuterPseudoLayer();

		unsigned int nConnectors = ClusterHelper::GetClusterConnectorNumber(pCluster);
		float connectorHitRatio = (float)nConnectors/mainClusterHits.size();
	    
		std::vector<april_content::APRILCluster*> nearbyClusters;

		try
		{
			SearchProperClusters(pCluster, clusterVector, nearbyClusters);
		}
		catch(...)
		{
			std::cout << " GetNearbyClusters error!" << std::endl;
		}

		if(m_debugOutput)
		{
			std::cout << "    === cluster === " << std::endl
	        	      << "    cluster: " << pCluster << ", E: " << pCluster->GetHadronicEnergy()  << ", nhit: " 
					  << pCluster->GetNCaloHits() << std::endl
	        		  << "    nPossibleMipHits: " << pCluster->GetNPossibleMipHits() << ", mipFraction: " << pCluster->GetMipFraction() << std::endl
	        		  << "    isPhoton: " << isPhoton << std::endl
	        		  << "    clusterRegion: " << clusterRegion << " clusterIPAngle: " << clusterIPAngle << " clusterTime: " 
					  << clusterTime << " clusterTimeECal: " << clusterTimeECal << std::endl
	        		  << "    hadEnergyInEcal: " << hadEnergyInEcal << " energyRatio: " << energyRatio << std::endl
	        		  << "    density: " << density << ", connectorHitRatio: " << connectorHitRatio << std::endl
	        		  << "    innerLayer: " << innerLayer << " outerLayer: " << outerLayer << std::endl
	        		  << "    nearby cluster: " << nearbyClusters.size() << std::endl;

	            for(int iClu = 0; iClu < nearbyClusters.size(); ++iClu)
	        	{
	        		std::cout << "       ---> cluster: " << nearbyClusters.at(iClu) << ", E: " << nearbyClusters.at(iClu)->GetHadronicEnergy() 
	        			<< ", associatedTrack: " << nearbyClusters.at(iClu)->GetAssociatedTrackList().size() << std::endl;
	        	}

	        	std::cout << "    clusterMCPID: " << clusterPID << ", clusterMCCharge: " << clusterCharge << std::endl;
		}


		// photon
		const float maxPhotonClusterTime = 40.;
		const float maxPhotonClusterTimeEndcap = 25.;
		const float minPhotonClusterDensity = 0.02;
		const float minECALEnergyRatio = 0.55;

		bool fakePhoton = false;

		if( (energyRatio > minECALEnergyRatio || energyRatioOfMainHits > minECALEnergyRatio )   && 
		    (clusterTime < maxPhotonClusterTime || ( !isnan(clusterTimeECal) && clusterTimeECal < maxPhotonClusterTime ) ) )
		{
			if(pCluster->GetNCaloHits() >= 4 && density < minPhotonClusterDensity) 
			{
				//std::cout << " --- fake photon, density : " << density << std::endl;
				fakePhoton = true;
			}

			float meanHitPerLayer = ClusterHelper::GetMeanHitPerLayer(pCluster);
			//std::cout << " meanHitPerLayer: " << meanHitPerLayer << std::endl;

			if(pCluster->GetNCaloHits() > 10 && meanHitPerLayer < 1.2)
			{
				//std::cout << " --- fake photon, meanHitPerLayer: " << meanHitPerLayer << std::endl;
				fakePhoton = true;
			}

			if( (!fakePhoton) && (pCluster->GetNCaloHits() > 10) && (connectorHitRatio < 0.3 && density < 0.2) )
			{
				//std::cout << " --- fake photon, connectorHitRatio: " << connectorHitRatio << std::endl;
				fakePhoton = true;
			}


			if(!fakePhoton)
			{
			    //std::cout << "    --- mainClusterHits: " << mainClusterHits.size() << std::endl;

			    float rms1, rms2;
			    ClusterHelper::GetRMS(mainClusterHits, pCluster->GetCentroid(), pCluster->GetAxis(), rms1, rms2);

				if(pCluster->GetNCaloHits() > 30 && 
				   fabs(rms1-rms2) > 3 * std::min(rms1, rms2) ) 
				{
				    //std::cout << " --- fake photon, rms1: " << rms1 << ", rms2: " << rms2 << std::endl;
					fakePhoton = true;
				}
			}


			if(!fakePhoton)
			{
				if(clusterIPAngle < 1. && innerLayer <= 5)
			    {
			    	//std::cout << "    === \033[1;31m cluster: " << pCluster << ", E: " << pCluster->GetHadronicEnergy()  
			    	  //        << " a photon candidate ... \033[0m" << std::endl;

			    	// check if it is a segment of charged cluster
			    	fakePhoton = !CheckNearbyClusterWithCharge(pCluster, nearbyClusters, 1);
			    }
			    else
			    {
			    	// check if it is a segment of photon cluster
			    	fakePhoton = !CheckNearbyClusterWithCharge(pCluster, nearbyClusters, 0);
			    }

				if(clusterRegion == pandora::ENDCAP)
				{
					if((meanHitPerLayer < 3. && clusterIPAngle > 0.7) || clusterTimeECal > maxPhotonClusterTimeEndcap)
					{
						fakePhoton = true;
		
						if(m_debugOutput)
						{
							std::cout << "    === endcap cluster with angle: " << clusterIPAngle  
								<< " clusterTimeECal: " << clusterTimeECal << std::endl;
						}
					}
				}
			}
		}
		else
		{
			fakePhoton = true;
		}
		
		if(!fakePhoton) 
		{
			std::cout << "    === \033[1;31m cluster: " << pCluster << ", E: " << pCluster->GetHadronicEnergy()  
				<< " is tagged as a photon. \033[0m" << std::endl;

			pCluster->SetPhoton(true);
		}

		if(m_makeRecord)
		{
			// For efficiency and purity
		    std::vector<float> vars;
	        vars.push_back( float(hadEnergyInEcal) );
	        vars.push_back( float(clusterCharge) );
	        vars.push_back( float(clusterPID) );
	        vars.push_back( float(!fakePhoton) );
		    	    		
		    HistogramManager::CreateFill("NewPhotonID_eff", "hadEnergyInEcal:mcCharge:mcPID:isPhoton", vars);
		}
		
		// charged cluster
		// neutral cluster

		//IsFromNearbyCluster();
	}

    return pandora::STATUS_CODE_SUCCESS;
  }

  bool ChargedFragmentsMergingAlgorithm2::CheckNearbyClusterWithCharge(const april_content::APRILCluster* pCluster, std::vector<april_content::APRILCluster*>& nearbyClusters, int charge)
  {
	  bool isValidated = true;

	  for(int iClu = 0; iClu < nearbyClusters.size(); ++iClu)
	  {
		  float closestDistance = 1.e6;

	  	  auto nearbyCluster = nearbyClusters.at(iClu);

	      try
	      {
	          ClusterHelper::GetClosestDistanceApproach(pCluster, nearbyCluster, closestDistance, m_onlyUseConnectedHits);
	      }
          catch(pandora::StatusCodeException &)
	      {
	          std::cout << "GetClosestDistanceApproach failed" << std::endl;
	      }

		  if(charge == 1)
		  {
			  if(nearbyCluster->GetAssociatedTrackList().size() > 0)
	  	      {
				std::cout << "  near a charged cluster, closestDistance: "  << closestDistance << std::endl;

				unsigned int innerLayer = pCluster->GetInnerPseudoLayer();
				unsigned int outerLayer = pCluster->GetOuterPseudoLayer();

				bool passCheck = true;

				// check hit on the 1st layer
				if(innerLayer==1 && outerLayer < 40) 
				{
	                const pandora::OrderedCaloHitList& orderedCaloHitList = pCluster->GetMainOrderedClusterHits();
					auto& hitsAtFirstLayer = *(orderedCaloHitList.begin()->second);

					if(hitsAtFirstLayer.size() > 5) passCheck = false;

					if(passCheck)
					{
						pandora::CaloHitVector seedVec;

					    for(auto& hit : hitsAtFirstLayer)
					    {
					    	const april_content::CaloHit *const pAPRILCaloHit(dynamic_cast<const april_content::CaloHit *const>(hit));
							const april_content::ConnectorList& backwardConnectorList = 
								APRILContentApi::GetConnectorList(pAPRILCaloHit, april_content::BACKWARD_DIRECTION);
							const april_content::ConnectorList& forwardConnectorList = 
								APRILContentApi::GetConnectorList(pAPRILCaloHit, april_content::FORWARD_DIRECTION);

							std::cout << "  hit on 1st layer: " << pAPRILCaloHit << ", bakConnector: " << backwardConnectorList.size() 
								<< ", fwdConnector: " << forwardConnectorList.size() << std::endl;

							bool isSeed = (backwardConnectorList.size() == 0) && (forwardConnectorList.size() > 0);

					    	if(isSeed) 
					    	{
							    seedVec.push_back(hit);
					    	}

					    }

						float seedsDistance = 0;
						const float maxSeedDistance = 15.; // ECAL cell size 10 mm

						// if cluster has more than one seed on 1st layer, get the maximum seed distance
						if(seedVec.size() > 1)
						{
							for(int iSeed = 0; iSeed < seedVec.size(); ++iSeed)
							{
								for(int jSeed = iSeed + 1; jSeed < seedVec.size(); ++jSeed)
								{
									float distance = 
										(seedVec.at(iSeed)->GetPositionVector() - seedVec.at(jSeed)->GetPositionVector()).GetMagnitude();

									if(seedsDistance < distance)
									{
										seedsDistance = distance;
									}
								}
							}
						}

						if(seedVec.empty() || seedsDistance > maxSeedDistance) 
						{
							std::cout << "     seed size: " << seedVec.size() << ", seedsDistance: " << seedsDistance << std::endl;
							passCheck = false;
						}
					}
				}

				if(passCheck)
				{
					unsigned int nConnectors = ClusterHelper::GetClusterConnectorNumber(pCluster);

					const pandora::OrderedCaloHitList& mainClusterHits = pCluster->GetMainOrderedClusterHits();
					pandora::CaloHitList caloHitList;
					mainClusterHits.FillCaloHitList(caloHitList);

					if(caloHitList.size() > 8 && (float)nConnectors/caloHitList.size() < 0.55) 
					{
						passCheck = false;
					    std::cout << "     nConnectors : " << nConnectors << std::endl;
					}
				}

				// TODO::
				// check axes distance, track positon on ECAL (if between two seeds ?)
				if(passCheck)
				{
					float clusterIPAngle = ClusterHelper::GetClusterAxisStartingPointAngle(pCluster);

					if(clusterIPAngle > 1.) passCheck = false;
				}
				 
				if(passCheck) 
				{
					std::cout << "     OK." << std::endl;
				}
				else
				{
					isValidated = false;
				}

				break;
	  	      }
		  }
		  else
		  {
			  if( (nearbyCluster->IsPhoton() || nearbyCluster->GetAssociatedTrackList().size() == 0) &&
				  closestDistance < 50. ) 
		      {
				  //std::cout << "  \033[1;31m near neutral cluster, it maye be a neutral fragment. \033[0m"  << std::endl;

				  break;
		      }
			  else
			  {
				  isValidated = false;
			  }
		  }

	  	  if(closestDistance != 1.e6 && closestDistance > 100.) break;
	  }

	  return isValidated;
  }

  void ChargedFragmentsMergingAlgorithm2::SearchProperClusters(APRILCluster* startingCluster, 
		  std::vector<april_content::APRILCluster*>& allClusters,
		  std::vector<april_content::APRILCluster*>& properClusters)
  {
	  if(m_debugOutput)
	  {
		  const pandora::Cluster* const pandoraTrackStartClu = dynamic_cast<const pandora::Cluster* const>(startingCluster);
	      float startCluEnergy = startingCluster->GetHadronicEnergy();

	      auto pClusterMCParticle = pandora::MCParticleHelper::GetMainMCParticle(pandoraTrackStartClu);
	      std::cout << " SearchProperClusters for charged cluster: " << startingCluster << ", Ehad: " << startCluEnergy << ", MCP: " << pClusterMCParticle << std::endl;
	  }

	  std::vector<april_content::APRILCluster*> nearbyClusters;
	  GetNearbyClusters(startingCluster, allClusters, nearbyClusters);

	  // map for sorting all nearby clusters by closest distance
	  std::multimap<float, APRILCluster*> clusterDistanceMap;

	  for(int i = 0; i < nearbyClusters.size(); ++i)
	  {
		  auto nearbyCluster = nearbyClusters.at(i);

		  if(nearbyCluster == startingCluster) 
		  {
			  continue;
		  }

		  // GetClustersDistance
		  float closestDistance = 1.e6;

		  try
		  {
			  ClusterHelper::GetClosestDistanceApproach(startingCluster, nearbyCluster, closestDistance, m_onlyUseConnectedHits);
		  }
          catch(pandora::StatusCodeException &)
		  {
			  std::cout << "GetClosestDistanceApproach failed" << std::endl;
		  }

		  bool isMergingCandidate = closestDistance < m_maxClosestClusterDistance;

	      if(m_debugOutput)
		  {
			  std::cout << "  nearbyCluster: " << nearbyCluster << ", E: " << nearbyCluster->GetHadronicEnergy() 
				  << ", closestDistance: " << closestDistance << std::endl;
		  }

		  if(isMergingCandidate) 
		  {
		      clusterDistanceMap.insert( std::pair<float, APRILCluster*>(closestDistance, nearbyCluster) );
		  }
		  else
		  {
	          if(m_debugOutput2) 
			  {
				  std::cout << "    --- Not a merging cadidate" << std::endl;
			  }
		  }

	      if(m_debugOutput2)
		  {
			  std::cout << "-----------------------------------------------------------------------------------------" << std::endl;
		  }
      }
		  
	  for(auto it = clusterDistanceMap.begin(); it != clusterDistanceMap.end(); ++it)
	  {
		  auto nearbyCluster = it->second;
		  properClusters.push_back(nearbyCluster);
	  }

	  if(m_debugOutput)
	  {
		  std::cout << "-----------------------------------------------------------------------------------------------------------" << std::endl;
	  }
  }

  void ChargedFragmentsMergingAlgorithm2::GetNearbyClusters(pandora::Cluster* cluster, 
		  const std::vector<april_content::APRILCluster*>& clusterVector, std::vector<april_content::APRILCluster*>& clustersInRange)
  {
      pandora::CartesianVector centroid(0., 0., 0.);
	  ClusterHelper::GetCentroid(cluster, centroid);

	  const float distance = m_maxStartingClusterDistance;
	  const mlpack::math::Range range(0., distance);

      arma::mat testPoint(3, 1);
	  testPoint.col(0)[0] = centroid.GetX();
	  testPoint.col(0)[1] = centroid.GetY();
	  testPoint.col(0)[2] = centroid.GetZ();
	  
	  if(m_clusterCentroidsMatrix.size() == 0) 
	  {
		  std::cout << " Error: clusterCentroidsMatrix is null. " << std::endl;
		  return;
	  }

	  mlpack::range::RangeSearch<> rangeSearch(m_clusterCentroidsMatrix);
      std::vector<std::vector<size_t> > resultingNeighbors;
      std::vector<std::vector<double> > resultingDistances;
      rangeSearch.Search(testPoint, range, resultingNeighbors, resultingDistances);

      std::vector<size_t>& neighbors = resultingNeighbors.at(0);
      std::vector<double>& distances = resultingDistances.at(0);
	  
      for(size_t j=0; j < neighbors.size(); ++j)
      {
      	size_t neighbor = neighbors.at(j);
      	//double hitsDist = distances.at(j);

		clustersInRange.push_back( clusterVector.at(neighbor) );
	  }


	  // sort cluster by distance
	  std::multimap<float, APRILCluster*> clusterDistanceMap;

	  for(int i = 0; i < clustersInRange.size(); ++i)
	  {
		  auto clusterInRange = clustersInRange.at(i);

		  clusterDistanceMap.insert( std::pair<float, APRILCluster*>(distances.at(i), clusterInRange) );
	  }

	  clustersInRange.clear();

	  for(auto& mapIter : clusterDistanceMap)
	  {
		  auto clu = mapIter.second;
		  clustersInRange.push_back(clu);
	  }
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ChargedFragmentsMergingAlgorithm2::GetEligibleClusters(std::vector<APRILCluster*>& clusterVector) const
  {
	clusterVector.clear();

    const pandora::ClusterList *pClusterList = NULL;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

	//std::cout << ">>>cluster number: " << pClusterList->size() << std::endl;

    if(pClusterList->empty())
      return pandora::STATUS_CODE_SUCCESS;

    for(pandora::ClusterList::const_iterator clusterIter = pClusterList->begin(), clusterEndIter = pClusterList->end() ;
        clusterEndIter != clusterIter ; ++clusterIter)
    {
      const pandora::Cluster *const pCluster = *clusterIter;

      //if(!this->CanMergeCluster(pCluster))
      //  continue;

	  auto aprilCluster = APRILContentApi::Modifiable(dynamic_cast<const april_content::APRILCluster*>(pCluster));
      clusterVector.push_back(aprilCluster);
    }

	std::sort(clusterVector.begin(), clusterVector.end(), pandora_monitoring::PandoraMonitoring::SortClustersByHadronicEnergy);

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ChargedFragmentsMergingAlgorithm2::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
    m_maxStartingClusterDistance = 1000.;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxStartingClusterDistance", m_maxStartingClusterDistance));

	m_maxClosestClusterDistance = 400.;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxClosestClusterDistance", m_maxClosestClusterDistance));

	m_debugOutput = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "DebugOutput", m_debugOutput));

	m_debugOutput2 = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "DebugOutput2", m_debugOutput2));

	m_onlyUseConnectedHits = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "OnlyUseConnectedHits", m_onlyUseConnectedHits));

	m_useMCPForPID = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "UseMCPForPID", m_useMCPForPID));

	m_makeRecord = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MakeRecord", m_makeRecord));

    return pandora::STATUS_CODE_SUCCESS;
  }

} 

