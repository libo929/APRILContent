/// \file SimpleRegionClusteringAlgorithm.cc
/*
 *
 * SimpleRegionClusteringAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. sept. 29 2016
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "APRILClustering/SimpleRegionClusteringAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"

namespace april_content
{

  pandora::StatusCode SimpleRegionClusteringAlgorithm::Run()
  {
    const pandora::CaloHitList *pCaloHitList = NULL;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pCaloHitList));

    pandora::CaloHitList clusterCaloHitList;

    pandora::CartesianVector clusteringDirection(
        std::sin(m_thetaAngle) * std::cos(m_phiAngle),
        std::sin(m_thetaAngle) * std::sin(m_phiAngle),
        std::cos(m_thetaAngle)
    );

    for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin(), endIter = pCaloHitList->end() ;
        endIter !=iter ; ++iter)
    {
      const pandora::CaloHit *const pCaloHit(*iter);

      if(!PandoraContentApi::IsAvailable(*this, pCaloHit))
        continue;

      const pandora::CartesianVector &position(pCaloHit->GetPositionVector());
      const float angle(position.GetOpeningAngle(clusteringDirection));
      const float distance(position.GetMagnitude()*std::sin(angle));

      if(distance > m_distance)
        continue;

      clusterCaloHitList.push_back(pCaloHit);
    }

    if(!clusterCaloHitList.empty())
    {
      const pandora::Cluster *pCluster = NULL;
	  object_creation::ClusterParameters clusterParameters;
      clusterParameters.m_caloHitList = clusterCaloHitList;

      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(*this, clusterParameters, pCluster));
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode SimpleRegionClusteringAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
    m_thetaAngle = M_PI/2;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ThetaAngle", m_thetaAngle));

    m_phiAngle = 0;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "PhiAngle", m_phiAngle));

    m_distance = 500.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "Distance", m_distance));

    if(m_distance < 0.f)
      return pandora::STATUS_CODE_INVALID_PARAMETER;

    return pandora::STATUS_CODE_SUCCESS;
  }


} 

